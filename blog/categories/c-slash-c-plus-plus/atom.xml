<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/c++ | RonnieTsang's Blog]]></title>
  <link href="http://RonnieTsang.github.io/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://RonnieTsang.github.io/"/>
  <updated>2014-10-03T09:52:39+08:00</updated>
  <id>http://RonnieTsang.github.io/</id>
  <author>
    <name><![CDATA[RonnieTsang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding # and ## in C/C++]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/09/15/understanding-number-and-number-number-in-c-slash-c-plus-plus/"/>
    <updated>2014-09-15T00:09:19+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/09/15/understanding-number-and-number-number-in-c-slash-c-plus-plus</id>
    <content type="html"><![CDATA[<p>这两个符号在 C/C++ 语言中属于<code>编译器预处理</code>的范畴，属于编译期概念（而非运行期概念）</p>

<p><strong><code>##</code>连接符</strong> 的功能是在带参数的宏定义中将两个子串(token)连接起来，从而形成一个新的子串。但它不可以是第一个或者最后一个子串</p>

<p><code>所谓的子串就是指编译器能够识别的最小语法单元。具体的定义在编译原理里面有详尽解释，但不知道也无所谓</code></p>

<p><strong><code>#</code>连接符</strong> 的功能是把传递过来的参数当成字符串进行替代，即所谓 <code>字符串化</code></p>

<!-- more -->


<h2>实例说明</h2>

<p>假设程序中已经定义了这样一个带参数的宏：</p>

<pre><code class="c">#define paster(n) printf("token" #n " = %d", token##n)
</code></pre>

<p>同时又定义了一个整型变量：</p>

<pre><code class="c">int token9 = 9;
</code></pre>

<p>现在在主程序中以下面的方式调用这个宏：</p>

<pre><code class="c">paster(9);
</code></pre>

<p>那么在编译时，上面的这句话被扩展为：</p>

<pre><code class="c">printf("token" "9" " = %d", token9);
</code></pre>

<p>运行结果自然就是：</p>

<pre><code class="sh">$ token9 = 9
</code></pre>

<h2>小记</h2>

<pre><code class="sh">## -- 连接两个参数
#  -- 字符串化
</code></pre>
]]></content>
  </entry>
  
</feed>
