<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Operatingsystem | RonnieTsang's Blog]]></title>
  <link href="http://RonnieTsang.github.io/blog/categories/operatingsystem/atom.xml" rel="self"/>
  <link href="http://RonnieTsang.github.io/"/>
  <updated>2015-01-27T00:58:11+08:00</updated>
  <id>http://RonnieTsang.github.io/</id>
  <author>
    <name><![CDATA[RonnieTsang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[计算机基础(一): 操作系统篇 -- 线程同步]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-thread-synchronization/"/>
    <updated>2014-10-06T07:16:07+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-thread-synchronization</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机基础(一): 操作系统篇 -- Linux 进程间通信的几种方式]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-interprocess-communication/"/>
    <updated>2014-10-06T07:14:51+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-interprocess-communication</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机基础(一): 操作系统篇 -- 进程与线程的比较]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-process-and-thread/"/>
    <updated>2014-10-06T07:13:41+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-process-and-thread</id>
    <content type="html"><![CDATA[<h2>一、概述</h2>

<h3>（1）进程和线程的比较</h3>

<p><strong>我们通常看到的说法是这样的</strong>：</p>

<p>按照教科书上的定义，<strong>进程是资源管理的最小单位，线程是程序执行的最小单位</strong>。</p>

<p><strong>进程可以认为是程序执行时的一个实例</strong>。进程是系统进行资源分配的独立实体，且每个进程拥有独立的地址空间。一个进程无法直接访问另一个进程的变量和数据结构，如果希望让一个进程访问另一个进程的资源，需要使用进程间通信，比如：管道，文件， 套接字等。从内核的观点看，进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。</p>

<p><strong>一个进程可以拥有多个线程，每个线程使用其所属进程的栈空间。</strong> 线程与进程的一个主要区别是，同一进程内的多个线程会共享部分状态，多个线程可以读写同一块内存(一个进程无法直接访问另一进程的内存)。同时，每个线程还拥有自己的寄存器和栈，其它线程可以读写这些栈内存。</p>

<p><strong>线程是进程的一个特定执行路径。</strong>当一个线程修改了进程中的资源， 它的兄弟线程可以立即看到这种变化。线程是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</p>

<p><strong>总的来说，进程是资源分配的最小单位，线程则是程序执行的最小单位。</strong></p>

<!-- more -->


<p>更详细的分析，包括：</p>

<blockquote><ul>
<li>进程是系统进行资源分配的基本单位，有独立的内存地址空间； 线程是CPU调度的基本单位，没有单独地址空间，有独立的栈，局部变量，寄存器，程序计数器等</li>
<li>创建进程的开销大，包括创建虚拟地址空间等需要大量系统资源；创建线程开销小，基本上只有一个内核对象和一个堆栈</li>
<li>一个进程无法直接访问另一个进程的资源；同一进程内的多个线程共享进程的资源</li>
<li>进程切换开销大；线程切换开销小</li>
<li>进程间通信开销大；线程间通信开销小</li>
<li>线程属于进程，不能独立执行。每个进程至少要有一个线程，成为主线程</li>
</ul>
</blockquote>

<h3>（2）多进程和多线程的选择</h3>

<blockquote><ul>
<li>多进程的程序要比多线程的程序<strong>健壮</strong>，线程虽然有自己的堆栈和局部变量，但线程没有单独的地址空间，一个线程死掉就等于整个进程死掉。但在进程切换时，耗费资源较大，<strong>效率</strong>要差一些，因此：</li>
<li>当我们需要一种相对比较<strong>节俭</strong>的多任务操作方式的情况下，多线程提供了很不错的解决方案，因为同一个进程的多个线程彼此之间使用相同的地址空间，共享大部分数据，启动一个线程所花费的空间远远小于启动一个进程所花费的<strong>空间</strong>，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的<strong>时间</strong></li>
<li>多线程的另一个明显的优点是线程间方便的<strong>通信</strong>机制。对不同进程来说，由于它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这不仅费时且很不方便。线程则不然，由于同一进程下的线程之间共享数据空间，所以一个线程的数据可以直接为其它线程所用，快捷又方便。（当然，数据的共享也带来其他一些问题，有的变量不能同时被两个线程所修改，有的子程序中声明为static的数据更有可能给多线程程序带来灾难性的打击，这些正是编写多线程程序时最需要注意的地方。）</li>
<li>对于一些要求同时进行并且又要<strong>共享</strong>某些变量的<strong>并发</strong>操作，只能用多线程，不能用多进程</li>
</ul>
</blockquote>

<p>正如当年采用多进程模型代替单进程模型一样，多线程程序使设计更简洁、功能更完备，程序的执行效率也更高。除了以上所说的优点外，不和进程比较，多线程程序作为一种多任务、并发的工作方式，有以下的优点：</p>

<blockquote><ul>
<li>提高应用程序响应。这对图形界面的程序尤其有意义，当一个操作耗时很长时，整个系统都会等待这个操作，此时程序不会响应键盘、鼠标、菜单的操作，而使用多线程技术，将耗时长的操作（time consuming）置于一个新的线程，可以避免这种尴尬的情况。</li>
<li>使多CPU系统更加有效。操作系统会保证当线程数不大于CPU数目时，不同的线程运行于不同的CPU上。</li>
<li>改善程序结构。一个既长又复杂的进程可以考虑分为多个线程，成为几个独立或半独立的运行部分，这样的程序会利于理解和修改。</li>
</ul>
</blockquote>

<p>从函数调用上来说，进程创建使用<code>fork()</code>操作；线程创建使用<code>clone()</code>操作。 <a href="http://www.kohala.com/start/">Richard Stevens</a>大师这样说过：</p>

<blockquote><p> <strong>fork is expensive.</strong> Memory is copied from the parent to the child， all descriptors are duplicated in the child， and so on. Current implementations use a technique called <code>copy-on-write</code>， which avoids a copy of the parent&rsquo;s data space to the child until the child needs its own copy. But， regardless of this optimization， fork is expensive.</p>

<p><strong>IPC is required to pass information between the parent and child after the fork.</strong> Passing information from the parent to the child before the fork is easy， since the child starts with a copy of the parent&rsquo;s data space and with a copy of all the parent&rsquo;s descriptors. But， returning information from the child to the parent takes more work.</p>

<p><strong>Threads help with both problems.</strong> Threads are sometimes called <code>lightweight processes</code> since a thread is &ldquo;lighter weight&rdquo; than a process. That is， thread creation can be 10–100 times faster than process creation.</p>

<p>All threads within a process share the same global memory. This makes the sharing of information easy between the threads， but along with this <code>simplicity</code> comes the problem of <code>synchronization</code>.</p></blockquote>

<h3>（3）从操作系统角度看</h3>

<p>我们知道，操作系统有两个主要用途：</p>

<blockquote><ul>
<li>防止硬件被失控的应用程序滥用</li>
<li>在控制复杂而又通常广泛不同的低级硬件设备方面，为应用程序提供简单一致的方法。</li>
</ul>
</blockquote>

<p>操作系统通过以下几个不同层级的抽象概念实现这两个用途：</p>

<blockquote><ul>
<li><strong>文件：对I/O设备的抽象；</strong></li>
<li><strong>虚拟存储器：对I/O设备、主存储器的抽象</strong>；</li>
<li><strong>进程：对I/O设备、主存储器和处理器的抽象。</strong></li>
</ul>
</blockquote>

<p>这几个概念是<strong>相当基础而且重要</strong>的，进程是操作系统对运行中的程序的一种抽象。在一个系统中可以同时运行多个进程，而每个进程都好像在独占地使用硬件。我们称之为<code>并发运行</code>，实际上是说一个进程的指令和另一个进程的指令是交错执行的，操作系统实现这种交错执行的机制称为<code>上下文切换(context switching)</code>。</p>

<p>而在现代系统中，一个进程实际上可以由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。这在前文已经有过说明了。</p>

<p>虚拟存储器，则为每个进程提供了一个假象，好像每个进程都在独占地使用主存。每个进程看到的存储器都是一致的，称之<code>为虚拟地址空间</code>。</p>

<p><code>（关于虚拟存储器，我会找时间专门整理一篇详尽的文章进行总结，希望不会等太久）</code></p>

<p>最后，文件只不过就是<code>字节序列</code>。每个I/O设备都可以看成是文件，系统中的所有输入输出都是通过使用称为Unix I/O的一小组系统函数调用读写文件来实现的。文件这个简单而精致的概念是非常强大的，因为它使得应用程序能够统一地看待系统中可能含有的各种I/O设备。</p>

<hr />

<h2>二、线程的实现方式</h2>

<p>在上一篇文章中，我们已经对进程的状态及其转换有所了解，这里我们会对线程做进一步的认识，关于<code>线程的实现方式</code>，或者说，<code>用户线程与内核线程的区别</code>。</p>

<p>线程的实现可以分为两类：<code>用户级线程</code> (User-Level Thread)和 <code>内核线线程</code> (Kernel-Level Thread)，后者又称为内核支持的线程或轻量级进程。<strong>分类的标准主要是线程的调度者在核内还是在核外</strong>。<strong>前者更利于并发使用多处理器的资源，而后者则更多考虑的是上下文切换开销。</strong>（在操作系统设计上，从进程演化出线程，最主要的目的就是<strong>更好的支持 <a href="http://en.wikipedia.org/wiki/Symmetric_multiprocessing">SMP</a> 以及减小（进程/线程）上下文切换开销</strong>。）</p>

<p><strong>用户线程</strong>指不需要内核支持而在用户程序中实现的线程，其不依赖于操作系统核心，应用进程利用线程库提供创建、同步、调度和管理线程的函数来控制用户线程。不需要用户态/核心态切换，速度快，操作系统内核不知道多线程的存在，因此一个线程阻塞将使得整个进程（包括它的所有线程）阻塞。由于这里的处理器时间片分配是以进程为基本单位，所以每个线程执行的时间相对减少。</p>

<p><strong>内核线程</strong>由操作系统内核创建和撤销。内核维护进程及线程的上下文信息以及线程切换。一个内核线程由于I/O操作而阻塞，不会影响其它线程的运行。</p>

<p>以下是用户级线程和内核级线程的区别：</p>

<blockquote><ul>
<li>内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。</li>
<li>用户级线程的创建、撤消和调度不需要OS内核的支持，是在语言（如Java）这一级处理的；而内核支持线程的创建、撤消和调度都需OS内核提供支持，而且与进程的创建、撤消和调度大体是相同的。</li>
<li>用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。</li>
<li>在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。</li>
<li>用户级线程的程序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。</li>
</ul>
</blockquote>

<p>在目前的商用系统中，通常都将两者结合起来使用，既提供<strong>核心线程</strong>以满足 SMP 系统的需要，也支持用<strong>线程库</strong>的方式在用户态实现另一套线程机制，此时一个核心线程同时成为多个用户态线程的调度者。正如很多技术一样，&#8221;混合&#8221;通常都能带来更高的效率，但同时也带来更大的实现难度，出于&#8221;简单&#8221;的设计思路，Linux从一开始就没有实现混合模型的计划，但它在实现上采用了另一种思路的&#8221;混合&#8221;。</p>

<p>在线程机制的具体实现上，可以在操作系统内核上实现线程，也可以在核外实现，后者显然要求核内至少实现了进程，而前者则一般要求在核内同时也支持进程。核心级线程模型显然要求前者的支持，而用户级线程模型则不一定基于后者实现。这种差异，正如前所述，是两种分类方式的标准不同带来的。</p>

<p>当核内既支持进程也支持线程时，就可以实现线程-进程的&#8221;多对多&#8221;模型，即一个进程的某个线程由核内调度，而同时它也可以作为用户级线程池的调度者，选择合适的用户级线程在其空间中运行。这就是前面提到的&#8221;混合&#8221;线程模型，既可满足多处理机系统的需要，也可以最大限度的减小调度开销。绝大多数商业操作系统（如Digital Unix、Solaris、Irix）都采用的这种能够完全实现 <a href="http://en.wikipedia.org/wiki/POSIX_Threads">POSIX1003.1c</a> 标准的线程模型。</p>

<p>在核外实现的线程又可以分为&#8221;一对一&#8221;、&#8221;多对一&#8221;两种模型，前者用一个核心进程（也许是轻量进程）对应一个线程，将线程调度等同于进程调度，交给核心完成，而后者则完全在核外实现多线程，调度也在用户态完成。后者就是前面提到的单纯的用户级线程模型的实现方式，显然，这种核外的线程调度器实际上只需要完成线程运行栈的切换，调度开销非常小，但同时因为核心信号（无论是同步的还是异步的）都是以进程为单位的，因而无法定位到线程，所以这种实现方式不能用于多处理器系统，而这个需求正变得越来越大，因此，在现实中，纯用户级线程的实现，除算法研究目的以外，几乎已经消失了。</p>

<p>Linux内核只提供了轻量进程的支持，限制了更高效的线程模型的实现，但Linux着重优化了进程的调度开销，一定程度上也弥补了这一缺陷。目前最流行的线程机制 <a href="http://en.wikipedia.org/wiki/LinuxThreads">LinuxThreads</a> 所采用的就是线程-进程&#8221;一对一&#8221;模型，调度交给核心，而在用户级实现一个包括信号处理在内的线程管理机制。</p>

<p>在 Linux2.6 以前，pthread 线程库对应的实现就是这个名叫 LinuxThreads 的 lib，由 <a href="http://en.wikipedia.org/wiki/Xavier_Leroy">Xavier Leroy</a> 负责开发完成，并已绑定在 GLIBC 中发行。它所实现的就是基于核心轻量级进程的&#8221;一对一&#8221;线程模型，一个线程实体对应一个核心轻量级进程，而线程之间的管理在核外函数库中实现。</p>

<h3><strong>LinuxThread的线程机制</strong></h3>

<p>&ldquo;一对一&#8221;模型的好处之一是线程的调度由核心完成了，而其他诸如线程取消、线程间的同步等工作，都是在核外线程库中完成的。在LinuxThreads中，专门为每一个进程构造了一个管理线程，负责处理线程相关的管理工作。当进程第一次调用pthread_create()创建一个线程的时候就会创建（__clone()）并启动管理线程。</p>

<p>在一个进程空间内，管理线程与其他线程之间通过一对&#8221;管理管道（manager_pipe<a href="http://en.wikipedia.org/wiki/Symmetric_multiprocessing">2</a>）&#8221;来通讯，该管道在创建管理线程之前创建，在成功启动了管理线程之后，管理管道的读端和写端分别赋给两个全局变量<strong>pthread_manager_reader和</strong>pthread_manager_request，之后，每个用户线程都通过<strong>pthread_manager_request向管理线程发请求，但管理线程本身并没有直接使用</strong>pthread_manager_reader，管道的读端（manager_pipe[0]）是作为__clone()的参数之一传给管理线程的，管理线程的工作主要就是监听管道读端，并对从中取出的请求作出反应。</p>

<p>使用 pthread 以后，在用户看来，每一个 task_struct 就对应一个线程，而一组线程以及它们所共同引用的一组资源就是一个进程。</p>

<p>但是，一组线程并不仅仅是引用同一组资源就够了，它们还必须被视为一个整体。对此，POSIX 标准提出了如下要求：</p>

<ol>
<li>查看进程列表的时候，相关的一组 task_struct 应当被展现为列表中的一个节点</li>
<li>发送给这个&#8221;进程&#8221;的信号(对应 kill 系统调用)，将被对应的这一组 task_struct 所共享，并且被其中的任意一个&#8221;线程&#8221;处理</li>
<li>发送给某个&#8221;线程&#8221;的信号(对应 pthread_kill)，将只被对应的一个 task_struct 接收，并且由它自己来处理</li>
<li>当&#8221;进程&#8221;被停止或继续时(对应 SIGSTOP/SIGCONT 信号)，对应的这一组 task_struct 状态将改变</li>
<li>当&#8221;进程&#8221;收到一个致命信号(比如由于段错误收到 SIGSEGV 信号)，对应的这一组 task_struct 将全部退出</li>
<li>等等(以上可能不够全)</li>
</ol>


<p>LinuxThreads 利用前面提到的轻量级进程来实现线程，但是对于 POSIX 提出的那些要求，LinuxThreads 除了第5点以外，都没有实现(实际上是无能为力，至于原因，后文谈到 LinuxThreads 的不足时会解释)：</p>

<blockquote><ul>
<li>如果运行了A程序，A程序创建了10个线程，那么在shell下执行ps命令时将看到11个A进程，而不是1个(注意，也不是10个，下面会解释)</li>
<li>不管是kill还是pthread_kill，信号只能被一个对应的线程所接收</li>
<li>SIGSTOP/SIGCONT信号只对一个线程起作用</li>
</ul>
</blockquote>

<p>还好 LinuxThreads 实现了第5点，我认为这一点是最重要的。如果某个线程&#8221;挂&#8221;了，整个进程还在若无其事地运行着，可能会出现很多的不一致状态。进程将不是一个整体，而线程也不能称为线程。</p>

<p>或许这也是为什么 LinuxThreads 虽然与 POSIX 的要求差距甚远，却能够存在，并且还被使用了好几年的原因吧。</p>

<p>但是， LinuxThreads 为了实现这个&#8221;第5点&#8221;，还是付出了很多代价，并且创造了 LinuxThreads 本身的一大性能瓶颈。</p>

<p>接下来要说说，为什么A程序创建了10个线程，但是ps时却会出现11个A进程了。因为 LinuxThreads 自动创建了一个管理线程，上面提到的&#8221;第5点&#8221;就是靠管理线程来实现的。</p>

<p>当程序开始运行时，并没有管理线程存在(因为尽管程序已经链接了 pthread 库，但是未必会使用多线程)。程序第一次调用 pthread_create 时， LinuxThreads 发现管理线程不存在，于是创建这个管理线程。这个管理线程是进程中的第一个线程(主线程)的儿子。</p>

<p>然后在 pthread_create 中，会通过前面提到的管道向管理线程发送一个命令，告诉它创建线程。即是说，除主线程外，所有的线程都是由管理线程来创建的，管理线程是它们的父亲。</p>

<p>于是，当任何一个子线程退出时，管理线程将收到 SIGUSER1 信号(这是在通过 clone 创建子线程时指定的)。管理线程在对应的 sig_handler 中会判断子线程是否正常退出，如果不是，则杀死所有线程，然后自杀。</p>

<p>那么，主线程怎么办呢？主线程是管理线程的父亲，其退出时并不会给管理线程发信号。于是，在管理线程的主循环中通过 getppid 检查父进程的ID号，如果ID号是1，说明父亲已经退出，并把自己托管给了 init 进程(1号进程)。这时候，管理线程也会杀掉所有子线程，然后自杀。</p>

<p>可见，线程的创建与销毁都是通过管理线程来完成的，于是管理线程就成了 LinuxThreads 的一个性能瓶颈。创建与销毁需要一次进程间通信，一次上下文切换之后才能被管理线程执行，并且多个请求会被管理线程串行地执行。</p>

<h4>LinuxThreads的不足</h4>

<p>由于Linux内核的限制以及实现难度等等原因，LinuxThreads并不是完全POSIX兼容的，在它的发行README中有说明。</p>

<p>（1）<strong>进程id问题</strong></p>

<p>这个不足是最关键的不足，引起的原因牵涉到 LinuxThreads 的&#8221;一对一&#8221;模型。Linux内核并不支持真正意义上的线程，LinuxThreads 是用与普通进程具有同样内核调度视图的轻量级进程来实现线程支持的。这些轻量级进程拥有独立的进程id，在进程调度、信号处理、IO等方面享有与普通进程一样的能力。</p>

<p>在源码阅读者看来，就是Linux内核的 <code>clone()</code> 没有实现对 <code>CLONE_PID</code> 参数的支持。在内核 <code>do_fork()</code> 中对 <code>CLONE_PID</code> 的处理是这样的：</p>

<pre><code class="c">          if (clone_flags &amp; CLONE_PID) {
                if (current-&gt;pid)
                        goto fork_out;
        }
</code></pre>

<p>这段代码表明，目前的Linux内核仅在pid为0的时候认可 CLONE_PID 参数，实际上，仅在 SMP 初始化，手工创建进程的时候才会使用 CLONE_PID 参数。</p>

<p>按照 POSIX 定义，同一进程的所有线程应该共享一个进程id和父进程id，这在目前的&#8221;一对一&#8221;模型下是无法实现的。</p>

<p>（2）<strong>信号处理问题</strong></p>

<p>由于异步信号是内核以进程为单位分发的，而 LinuxThreads 的每个线程对内核来说都是一个进程，且没有实现&#8221;线程组&#8221;，因此，某些语义不符合 POSIX 标准，比如没有实现向进程中所有线程发送信号，README对此作了说明。</p>

<p>如果核心不提供实时信号，LinuxThreads 将使用 SIGUSR1 和 SIGUSR2 作为内部使用的 restart 和 cancel 信号，这样应用程序就不能使用这两个原本为用户保留的信号了。在Linux kernel 2.1.60以后的版本都支持扩展的实时信号（从 <em>SIGRTMIN 到 </em>SIGRTMAX），因此不存在这个问题。</p>

<p>某些信号的缺省动作难以在现行体系上实现，比如 SIGSTOP 和 SIGCONT，LinuxThreads 只能将一个线程挂起，而无法挂起整个进程。</p>

<p>（3）<strong>线程总数问题</strong></p>

<p>LinuxThreads 将每个进程的线程最大数目定义为1024，但实际上这个数值还受到整个系统的总进程数限制，这又是由于线程其实是核心进程。</p>

<p>在kernel 2.4.x中，采用一套全新的总进程数计算方法，使得总进程数基本上仅受限于物理内存的大小，计算公式在kernel/fork.c的fork_init()函数中：</p>

<pre><code class="c">    max_threads = mempages / (THREAD_SIZE/PAGE_SIZE) / 8
</code></pre>

<p>在i386上，THREAD_SIZE=2<em>PAGE_SIZE，PAGE_SIZE=2<sup>12</sup>（4KB），mempages=物理内存大小/PAGE_SIZE，对于256M的内存的机器，mempages=256</em>2<sup>20</sup>/2<sup>12</sup>=256*2<sup>8</sup>，此时最大线程数为4096。</p>

<p>但为了保证每个用户（除了root）的进程总数不至于占用一半以上物理内存，fork_init()中继续指定：</p>

<pre><code class="c">    init_task.rlim[RLIMIT_NPROC].rlim_cur = max_threads/2;
    init_task.rlim[RLIMIT_NPROC].rlim_max = max_threads/2;
</code></pre>

<p>这些进程数目的检查都在do_fork()中进行，因此，对于LinuxThreads来说，线程总数同时受这三个因素的限制。</p>

<p>（4）<strong>管理线程问题</strong></p>

<p>管理线程容易成为瓶颈，这是这种结构的通病；同时，管理线程又负责用户线程的清理工作，因此，尽管管理线程已经屏蔽了大部分的信号，但一旦管理线程死亡，用户线程就不得不手工清理了，而且用户线程并不知道管理线程的状态，之后的线程创建等请求将无人处理。</p>

<p>（5）<strong>同步问题</strong></p>

<p>LinuxThreads 中的线程同步很大程度上是建立在信号基础上的，这种通过内核复杂的信号处理机制的同步方式，效率一直是个问题。</p>

<p>（6）<strong>其他POSIX兼容性问题</strong></p>

<p>Linux中很多系统调用，按照语义都是与进程相关的，比如nice、setuid、setrlimit等，在目前的 LinuxThreads 中，这些调用都仅仅影响调用者线程。</p>

<p>（7）<strong>实时性问题</strong></p>

<p>线程的引入有一定的实时性考虑，但 LinuxThreads 暂时不支持，比如调度选项，目前还没有实现。不仅 LinuxThreads 如此，标准的Linux在实时性上考虑都很少。</p>

<h3><strong>其他的线程机制</strong></h3>

<p>LinuxThreads 的问题，特别是兼容性上的问题，严重阻碍了Linux上的跨平台应用（如Apache）采用多线程设计，从而使得Linux上的线程应用一直保持在比较低的水平。在Linux社区中，已经有很多人在为改进线程性能而努力，其中既包括用户级线程库，也包括核心级和用户级配合改进的线程库。</p>

<p>很显然，为了改进 LinuxThread 必须得到内核的支持，并且需要重写线程库。为了实现这个需求，起先最为人看好的有两个项目，一个是 RedHat 公司牵头研发的 <strong><a href="http://en.wikipedia.org/wiki/Native_POSIX_Thread_Library">NPTL</a></strong>（Native Posix Thread Library），另一个则是 IBM 投资开发的 <strong>NGPT</strong>（Next Generation Posix Threading），二者都是围绕完全兼容 POSIX 1003.1c，同时在核内和核外做工作以而实现多对多线程模型。这两种模型都在一定程度上弥补了 LinuxThreads 的缺点，且都是重起炉灶全新设计的。</p>

<p>在2003年的年中，IBM放弃了NGTP，也就是大约那时，Redhat发布了最初的NPTL。</p>

<p>NPTL最开始在redhat linux 9里发布，现在从RHEL3起内核2.6起都支持NPTL，并且完全成了GNU C库的一部分。</p>

<h4>NPTL</h4>

<p>NPTL实现了前面提到的POSIX的全部5点要求。但是，实际上，与其说是NPTL实现了，不如说是Linux内核实现了。</p>

<p>在Linux2.6中，内核有了线程组的概念，<code>task_struct</code> 结构中增加了一个 <code>tgid</code>(<code>threadgroupid</code>) 字段。如果这个task是一个&#8221;主线程&#8221;，则它的 <code>tgid</code> 等于 <code>pid</code>，否则 <code>tgid</code> 等于进程的 <code>pid</code> (即主线程的 <code>pid</code>)。在 <code>clone</code> 系统调用中，传递 <code>CLONE_THREAD</code> 参数就可以把新进程的 <code>tgid</code> 设置为父进程的 <code>tgid</code> (否则新进程的 <code>tgid</code> 会设为其自身的 <code>pid</code>)。</p>

<p>类似的 XXid 在 <code>task_struct</code> 中还有两个：<code>task-&gt;signal-&gt;pgid</code> 保存进程组的打头进程的 pid、<code>task-&gt;signal-&gt;session</code> 保存会话打头进程的 pid。通过这两个 id 来关联进程组和会话。</p>

<p>有了 tgid，内核或相关的 shell 程序就知道某个 tast_struct 是代表一个进程还是代表一个线程，也就知道在什么时候该展现它们，什么时候不该展现(比如在 ps 的时候，线程就不要展现了)。而 getpid(获取进程ID)系统调用返回的也是 tast_struct 中的 tgid，而 tast_struct 中的 pid 则由 gettid 系统调用来返回。</p>

<p>在执行ps命令的时候不展现子线程，也是有一些问题的。比如程序a.out运行时，创建了一个线程。假设主线程的pid是10001、子线程是10002（它们的tgid都是10001）。这时如果你kill10002，是可以把10001和10002这两个线程一起杀死的，尽管执行ps命令的时候根本看不到10002这个进程。如果你不知道Linux线程背后的故事，肯定会觉得遇到灵异事件了。</p>

<p>为了应付&#8221;发送给进程的信号&#8221;和&#8221;发送给线程的信号&#8221;，task_struc t里面维护了两套 <code>signal_pending</code>，一套是线程组共享的，一套是线程独有的。通过kill发送的信号被放在线程组共享的 signal_pending 中，可以由任意一个线程来处理；通过 <code>pthread_kill</code> 发送的信号( pthread_kill 是 pthread 库的接口，对应的系统调用 中tkill )被放在线程独有的 signal_pending 中，只能由本线程来处理。当线程停止/继续，或者是收到一个致命信号时，内核会将处理动作施加到整个线程组中。</p>

<p>NPTL的设计目标归纳可归纳为以下几点：</p>

<blockquote><ul>
<li>POSIX兼容性</li>
<li>SMP结构的利用</li>
<li>低启动开销</li>
<li>低链接开销（即不使用线程的程序不应当受线程库的影响）</li>
<li>与LinuxThreads应用的二进制兼容性</li>
<li>软硬件的可扩展能力</li>
<li>多体系结构支持</li>
<li>NUMA支持</li>
<li>与C++集成</li>
</ul>
</blockquote>

<p>在技术实现上，NPTL仍然采用1:1的线程模型，并配合glibc和最新的Linux Kernel2.5.x开发版在信号处理、线程同步、存储管理等多方面进行了优化。和LinuxThreads不同，NPTL没有使用管理线程，核心线程的管理直接放在核内进行，这也带了性能的优化。
主要是因为核心的问题，NPTL仍然不是100%POSIX兼容的，但就性能而言相对LinuxThreads已经有很大程度上的改进了。</p>

<p>除NPTL的1<em>1模型外还有一个m</em>n模型（NGPT就是），通常这种模型的用户线程数会比内核的调度实体多。在这种实现里，线程库本身必须去处理可能存在的调度，这样在线程库内部的上下文切换通常都会相当的快，因为它避免了系统调用转到内核态。然而这种模型增加了线程实现的复杂性,并可能出现诸如优先级反转的问题，此外，用户态的调度如何跟内核态的调度进行协调也是很难让人满意。</p>

<hr />

<h2>写在后面</h2>

<p>这篇文章东拼西凑了很多资料，其中有很多地方并不是很理解，权当做一个粗浅的概览。通过这篇文章的整理，才发现自己以前对进程和线程的理解是多么的丢人，现在呢也只能算对其基本概念能有初步的认识，以后有需要的时候再作深入的学习。</p>

<p>其他一些参考，有一些还没看的，也先一起记录下来了：</p>

<ul>
<li><a href="http://wenku.baidu.com/link?url=MFJwqO1I6UdonzUo4OAFiIU4YYjJkXFrQRH3l4w0HIzjk_s1idNts4Cwhbj10T5UF_pAescBWXB9pQmsG9oSpLGpJWHvdB0f-UATkviQebmwiki/LinuxThreads">Linux线程浅析</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_69708ebe0100sqm0.html">Linux多线程编程</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/kernel/l-thread/">Linux线程实现机制分析</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_thread1/">通用线程：POSIX线程详解，第1部分</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_thread2/">通用线程：POSIX线程详解，第2部分</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_thread3/">通用线程：POSIX线程详解，第3部分</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-threading.html">Linux 线程模型的比较：LinuxThreads 和 NPTL</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-signalsec/">Linux 多线程应用中如何编写安全的信号处理函数</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_threadapi/part1/">Posix线程编程指南(1)</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_threadapi/part2/">Posix线程编程指南(2)</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_threadapi/part3/">Posix线程编程指南(3)</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_threadapi/part4/">Posix线程编程指南(4)</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/thread/posix_threadapi/part5/">Posix线程编程指南(5)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机基础(一): 操作系统篇 -- 理解 Linux 进程状态及其转换]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-process-state/"/>
    <updated>2014-10-06T06:45:59+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/10/06/computer-science-basic-1-operating-system-process-state</id>
    <content type="html"><![CDATA[<h2>一、进程基本状态</h2>

<p>不同的操作系统对进程的状态解释不同，但是最基本的状态都是一样的。包括以下三种：</p>

<blockquote><ul>
<li><strong>执行态</strong>（Running）：进程占用CPU，并在CPU上运行；</li>
<li><strong>就绪态</strong>（Ready）：进程已经具备运行条件，但是CPU还没有分配过来；</li>
<li><strong>阻塞态</strong>（Blocked）：进程因等待某件事发生而暂时不能运行</li>
</ul>
</blockquote>

<!-- more -->


<p>进程在一生中，都处于上述3中状态之一。</p>

<p>理论上上述三种状态之间转换分为六种情况：</p>

<blockquote><ul>
<li><strong>执行->就绪</strong>：这是由调度引起的，主要是由于分配给进程CPU时间片用完</li>
<li><strong>就绪->执行</strong>：运行中的进程的时间片用完，调度就转到就绪队列中选择合适的进程（一般是优先级最高的进程）分配CPU</li>
<li><strong>执行->阻塞</strong>：正在执行的进程，由于等待某个事件发生而无法执行时，便放弃CPU而处于阻塞状态，例如等待I/O完成、申请缓冲区不能满足、等待信号等</li>
<li><strong>阻塞->就绪</strong>：处于阻塞状态的进程，若其等待的事件已经发生，于是进程由阻塞状态转变为就绪状态。</li>
</ul>
</blockquote>

<p>还有另外两种不会出现的状态转换：</p>

<blockquote><ul>
<li><strong>阻塞->执行</strong>：即使给阻塞进程分配CPU，也无法执行，操作系统在进行调度时不会从阻塞队列进行挑选，其调度的选择对象为就绪队列</li>
<li><strong>就绪->阻塞</strong>：因为就绪态根本就没有执行，何来进入阻塞态？</li>
</ul>
</blockquote>

<hr />

<h2>二、Linux进程状态</h2>

<p>Linux是一个多用户，多任务的系统，可以同时运行多个用户的多个程序，就必然会产生很多的进程，为了对进程从产生到消亡的整个过程进行跟踪和描述，就需要定义进程的各种状态并制定相应的状态转换策略，以此来控制进程的运行。</p>

<p>Linux进程状态包括以下几种：</p>

<h3>1、<strong>可执行态</strong> R (TASK_RUNNING)</h3>

<p>这是执行态和就绪态的合并，表示进程正在运行或准备运行，Linux 中使用 <code>TASK_RUNNING</code> 宏表示此状态。</p>

<p>只有在该状态的进程才可能在CPU上运行。而同一时刻可能有多个进程处于可执行状态，这些进程的 task_struct 结构（进程控制块）被放入对应CPU的可执行队列中（一个进程最多只能出现在一个CPU的可执行队列中）。进程调度器的任务就是从各个CPU的可执行队列中分别选择一个进程在该CPU上运行。</p>

<p>很多操作系统教科书将正在CPU上执行的进程定义为RUNNING状态、而将可执行但是尚未被调度执行的进程定义为READY状态，这两种状态在linux下统一为 <code>TASK_RUNNING</code> 状态。</p>

<h3>2、<strong>浅度睡眠态</strong> S (TASK_INTERRUPTIBLE)</h3>

<p>又称 <code>可中断的睡眠状态</code>，进程正在睡眠（被阻塞），等待资源到来是唤醒，也可以通过其他进程信号或时钟中断唤醒，进入运行队列。Linux 使用 <code>TASK_INTERRUPTIBLE</code> 宏表示此状态。</p>

<p>处于这个状态的进程因为等待某某事件的发生（比如等待socket连接、等待信号量），而被挂起。这些进程的 task_struct 结构被放入对应事件的等待队列中。当这些事件发生时（由外部中断触发、或由其他进程触发），对应的等待队列中的一个或多个进程将被唤醒。</p>

<p>通过 <code>ps</code> 命令我们会看到，一般情况下，进程列表中的绝大多数进程都处于 TASK_INTERRUPTIBLE 状态（除非机器的负载很高）。毕竟CPU就这么几个，进程动辄几十上百个，如果不是绝大多数进程都在睡眠，CPU又怎么响应得过来。</p>

<h3>3、<strong>深度睡眠态</strong> D (TASK_UNINTERRUPTIBLE)</h3>

<p>又称 <code>不可中断的睡眠状态</code>，其和浅度睡眠基本类似，但有一点就是不可被其他进程信号或时钟中断唤醒。Linux 使用 <code>TASK_UNINTERRUPTIBLE</code> 宏表示此状态。</p>

<p>与 <code>TASK_INTERRUPTIBLE</code> 状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。<code>不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号</code>。</p>

<blockquote><ul>
<li>绝大多数情况下，进程处在睡眠状态时，总是应该能够响应异步信号的。否则你将惊奇的发现，kill -9 竟然杀不死一个正在睡眠的进程了！ 于是我们也很好理解，为什么 ps 命令看到的进程几乎不会出现 <code>TASK_UNINTERRUPTIBLE</code> 状态，而总是 <code>TASK_INTERRUPTIBLE</code> 状态。</li>
<li>而 <code>TASK_UNINTERRUPTIBLE</code> 状态存在的意义就在于，内核的某些处理流程是不能被打断的。如果响应异步信号，程序的执行流程中就会被插入一段用于处理异步信号的流程（这个插入的流程可能只存在于内核态，也可能延伸到用户态），于是原有的流程就被中断了。（参见<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-linuxkernelint/">《Linux内核中断内幕</a>》）</li>
<li>在进程对某些硬件进行操作时（比如进程调用 read 系统调用对某个设备文件进行读操作，而 read 系统调用最终执行到对应设备驱动的代码，并与对应的物理设备进行交互），可能需要使用 <code>TASK_UNINTERRUPTIBLE</code> 状态对进程进行保护，以避免进程与设备交互的过程被打断，造成设备陷入不可控的状态。这种情况下的 <code>TASK_UNINTERRUPTIBLE</code> 状态总是非常短暂的，通过 ps 命令基本上不可能捕捉到。</li>
</ul>
</blockquote>

<p>Linux系统中也存在容易捕捉的 TASK_UNINTERRUPTIBLE 状态。执行 vfork 系统调用后，父进程将进入 TASK_UNINTERRUPTIBLE 状态，直到子进程调用 exit 或 exec （参见<a href="http://blog.sina.com.cn/s/blog_5eb8ebcb0100rp56.html">《神奇的vfork》</a>）。</p>

<p>通过下面的代码就能得到处于 <code>TASK_UNINTERRUPTIBLE</code> 状态的进程：</p>

<pre><code class="c">#include&lt;unistd.h&gt;
int main() {
    if ( !vfork() )
        sleep(100);
}
</code></pre>

<p>编译运行，然后 ps 一下：</p>

<pre><code class="sh">$ ps -ax | grep a.out
4371 pts/0    D+     0:00 ./a.out
4372 pts/0    S+     0:00 ./a.out
4374 pts/1    S+     0:00 grep a.out
</code></pre>

<p>然后我们可以试验一下 <code>TASK_UNINTERRUPTIBLE</code> 状态的威力。不管kill还是kill -9，这个 <code>TASK_UNINTERRUPTIBLE</code> 状态的父进程依然屹立不倒。</p>

<h3>4、<strong>暂停态</strong> T (TASK_STOPPED or TASK_TRACED)</h3>

<p>又称暂停状态或跟踪状态，进程暂停执行接受某种处理。如正在接受调试的进程处于这种状态，Linux 使用 <code>TASK_STOPPED</code> 宏表示此状态。</p>

<p>向进程发送一个 <code>SIGSTOP</code> 信号，它就会因响应该信号而进入 TASK_STOPPED 状态（除非该进程本身处于 TASK_UNINTERRUPTIBLE 状态而不响应信号）。（ SIGSTOP 与 SIGKILL 信号一样，是非常强制的。不允许用户进程通 过signal 系列的系统调用重新设置对应的信号处理函数。）</p>

<p>向进程发送一个 <code>SIGCONT</code> 信号，可以让其从 TASK_STOPPED 状态恢复到 TASK_RUNNING 状态。</p>

<p>当进程正在被跟踪时，它处于 TASK_TRACED 这个特殊的状态。“正在被跟踪”指的是进程暂停下来，等待跟踪它的进程对它进行操作。比如在 gdb 中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于 TASK_TRACED 状态。而在其他时候，被跟踪的进程还是处于前面提到的那些状态。</p>

<p>对于进程本身来说，TASK_STOPPED 和 TASK_TRACED 状态很类似，都是表示进程暂停下来。而 TASK_TRACED 状态相当于在 TASK_STOPPED 之上多了一层保护，处于 TASK_TRACED 状态的进程不能响应 SIGCONT 信号而被唤醒。只能等到调试进程通过 ptrace 系统调用执行 PTRACE_CONT、PTRACE_DETACH 等操作（通过 ptrace 系统调用的参数指定操作），或调试进程退出，被调试的进程才能恢复 TASK_RUNNING 状态。</p>

<h3>5、<strong>退出状态-僵死态</strong> Z (TASK_DEAD – EXIT_ZOMBIE)</h3>

<p>又称退出状态，进程已经结束但未释放PCB，进程成为僵尸进程，Linux 使用 <code>EXIT_ZOMBIE</code> 宏表示此状态。</p>

<p>进程在退出的过程中，处于 TASK_DEAD 状态。</p>

<p>在这个退出过程中，进程占有的所有资源将被回收，除了 task_struct 结构（以及少数资源）以外。于是进程就只剩下 task_struct 这么个空壳，故称为僵尸。</p>

<p>之所以保留 task_struct，是 <strong>因为</strong> task_struct 里面保存了进程的退出码、以及一些统计信息。而其父进程很可能会关心这些信息。比如在 shell 中，<code>$?</code> 变量就保存了最后一个退出的前台进程的退出码，而这个退出码往往被作为 if 语句的判断条件。当然，内核也可以将这些信息保存在别的地方，而将 task_struct 结构释放掉，以节省一些空间。但是使用 task_struct 结构更为方便，因为在内核中已经建立了从 pid 到 task_struct 的查找关系，还有进程间的父子关系。释放掉 task_struct，则需要建立一些新的数据结构，以便让父进程找到它的子进程的退出信息。</p>

<p>父进程可以通过 wait 系列的系统调用（如 wait4、waitid ）来等待某个或某些子进程的退出，并获取它的退出信息。然后 wait 系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉。子进程在退出的过程中，内核会给其父进程发送一个信号，通知父进程来“收尸”。这个信号默认是 SIGCHLD ，但是在通过 clone 系统调用创建子进程时，可以设置这个信号。</p>

<p>通过下面的代码能够制造一个 EXIT_ZOMBIE 状态的进程：</p>

<pre><code class="c">#include&lt;unistd.h&gt;
int main() {
    if ( fork() )
        while ( 1 ) sleep(100);
}
</code></pre>

<p>编译运行，然后 ps 一下：</p>

<pre><code class="sh">$ ps -ax | grep a.out
10410 pts/0    S+     0:00 ./a.out
10411 pts/0    Z+     0:00 [a.out]
10413 pts/1    S+     0:00 grep a.out
</code></pre>

<p>只要父进程不退出，这个僵尸状态的子进程就一直存在。那么如果父进程退出了呢，谁又来给子进程“收尸”？</p>

<p>当进程退出的时候，会将它的所有子进程都托管给别的进程（使之成为别的进程的子进程）。托管给谁呢？可能是退出进程所在进程组的下一个进程（如果存在的话），或者是1号进程。所以每个进程、每时每刻都有父进程存在。除非它是1号进程。</p>

<p>1号进程，pid为1的进程，又称 <code>init 进程</code>：</p>

<p>Linux 系统启动后，第一个被创建的用户态进程就是 init 进程。它有两项使命：
（1）执行系统初始化脚本，创建一系列的进程（它们都是 init 进程的子孙）；
（2）在一个死循环中等待其子进程的退出事件，并调用 waitid 系统调用来完成“收尸”工作；</p>

<p>init 进程不会被暂停、也不会被杀死（这是由内核来保证的）。它在等待子进程退出的过程中处于 TASK_INTERRUPTIBLE 状态，“收尸”过程中则处于 TASK_RUNNING 状态。</p>

<h3>6、<strong>退出状态</strong> X (TASK_DEAD – EXIT_DEAD)</h3>

<p>而进程在退出过程中也可能 <code>不会保留</code> 它的 task_struct 。比如这个进程是多线程程序中被 detach 过的进程（进程？线程？参见<a href="http://wenku.baidu.com/link?url=fMmb8NKSH9tolCwBh50f4ocE-bmlMuo0_J5_-V9_djN1sdm0n2XzQcf8zkUF0IBNeGHMwM9KUHBCXOs0qldPOqce9ycaYFuiCLFdSP4B7vi">《linux线程浅析》</a>）。或者父进程通过设置 SIGCHLD 信号的 handler 为 SIG_IGN，显式的忽略了 SIGCHLD 信号。（这是 posix 的规定，尽管子进程的退出信号可以被设置为 SIGCHLD 以外的其他信号。）此时，进程将被置于 EXIT_DEAD 退出状态，这意味着接下来的代码立即就会将该进程彻底释放。所以 EXIT_DEAD 状态是非常短暂的，几乎不可能通过 ps 命令捕捉到。</p>

<hr />

<h2>三、<strong>Linux 进程的初始状态</strong></h2>

<p>进程是通过 fork 系列的系统调用（fork、clone、vfork）来创建的，内核（或内核模块）也可以通过 kernel_thread 函数创建内核进程。</p>

<p>这些创建子进程的函数本质上都完成了相同的功能——将调用进程复制一份，得到子进程。（可以通过选项参数来决定各种资源是共享、还是私有。）</p>

<p>那么既然调用进程处于 TASK_RUNNING 状态（否则，它若不是正在运行，又怎么进行调用？），则子进程默认也处于 TASK_RUNNING 状态。</p>

<p>另外，在系统调用调用 clone 和内核函数 kernel_thread 也接受 CLONE_STOPPED 选项，从而将子进程的初始状态置为 TASK_STOPPED 。</p>

<hr />

<h2>四、<strong>Linux 进程状态变迁</strong></h2>

<p>进程自创建以后，状态可能发生一系列的变化，直到进程退出。而尽管进程状态有好几种，但是进程状态的变迁却只有两个方向：从 <code>TASK_RUNNING状态</code> 变为 <code>非TASK_RUNNING状态</code> 、或者从 <code>非TASK_RUNNING状态</code> 变为 <code>TASK_RUNNING状态</code>。</p>

<p>也就是说，如果给一个 TASK_INTERRUPTIBLE 状态的进程发送 SIGKILL 信号，这个进程将先被唤醒（进入TASK_RUNNING状态），然后再响应 SIGKILL 信号而退出（变为TASK_DEAD状态）。并不会从 TASK_INTERRUPTIBLE 状态直接退出。</p>

<p>进程从非 TASK_RUNNING 状态变为 TASK_RUNNING 状态，是由别的进程（也可能是中断处理程序）执行唤醒操作来实现的。执行唤醒的进程设置被唤醒进程的状态为 TASK_RUNNING ，然后将其 task_struct 结构加入到某个CPU的可执行队列中。于是被唤醒的进程将有机会被调度执行。</p>

<p>而进程从 TASK_RUNNING 状态变为非 TASK_RUNNING 状态，则有两种途径：</p>

<blockquote><ul>
<li>响应信号而进入 TASK_STOPED 状态、或 TASK_DEAD 状态；</li>
<li>执行系统调用主动进入 TASK_INTERRUPTIBLE 状态（如 nanosleep 系统调用）、或 TASK_DEAD 状态（如 exit 系统调用）；或由于执行系统调用需要的资源得不到满足，而进入 TASK_INTERRUPTIBLE 状态或 TASK_UNINTERRUPTIBLE 状态（如 select 系统调用）。</li>
</ul>
</blockquote>

<p>显然，这两种情况都只能发生在进程正在CPU上执行的情况下。</p>

<p>以上关于Linux进程及其状态转换的描述，可参考下图的总结：</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/computer-science-basic-1-operating-system-process-state-1.jpg' width='' height='' title='Linux进程状态及其转换'><span class='caption-text'>Linux进程状态及其转换</span></span></p>

<hr />

<p>Reference:</p>

<p>  1、<a href="http://blog.csdn.net/huzia/article/details/18946491">http://blog.csdn.net/huzia/article/details/18946491</a>
  2、<a href="http://blog.chinaunix.net/uid-26126915-id-2948970.html">http://blog.chinaunix.net/uid-26126915-id-2948970.html</a></p>
]]></content>
  </entry>
  
</feed>
