<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RonnieTsang's Blog]]></title>
  <link href="http://RonnieTsang.github.io/atom.xml" rel="self"/>
  <link href="http://RonnieTsang.github.io/"/>
  <updated>2014-10-03T09:52:39+08:00</updated>
  <id>http://RonnieTsang.github.io/</id>
  <author>
    <name><![CDATA[RonnieTsang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Should C Programmers Learn Erlang?]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/10/03/why-should-c-programmers-learn-erlang/"/>
    <updated>2014-10-03T09:51:04+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/10/03/why-should-c-programmers-learn-erlang</id>
    <content type="html"><![CDATA[<p>标签（空格分隔）： Erlang</p>

<p>这是一篇翻译文章，原文<a href="http://tchen.me/posts/2013-07-22-why-should-c-programmers-learn-erlang.html">在此</a>。水平有限，见笑了。</p>

<p>2013年底初接触 <a href="http://www.erlang.org/">Erlang</a> ，真的被她震撼到了！虽然一开始很不习惯其语法和变量只能绑定不能改变值等各种新奇的东西，写起代码来也很别扭，但是通过一天的接触学习，毫不夸张地说，我爱上她了。</p>

<p>你要问为什么？
爱难道需要理由吗？当然要，翻译这篇文章，就是为了回答这个问题！</p>

<p>很可惜的是，后来由于各种原因包括工作变动，并没有继续深入学习使用过 Erlang ，仅以此文，开启重新学习 Erlang 的计划！</p>

<p>以下是正文：</p>

<hr />

<h1>前言</h1>

<p>如果有人跳出来说一种语言比另一种语言好，通常这将引发这两个语言阵营之间一场激烈的争论。一旦你使用某种语言很长时间，你会成为她的狂热粉丝，并不自觉地试图去捍卫她。不管你承不承认，（此时的）你已经跳入了一个陷阱，你所能看到的东西被极大地限制了（，变得狭隘）。</p>

<p>对此，《肖生克的救赎》给出了很好地注解：
<img src="http://tchen.me/assets/files/snapshots/institutionalized.jpg" alt="The Shawshank Redemption" /></p>

<blockquote><ul>
<li>[Red] 这些墙很有趣。刚入狱的时候，你痛恨周围的高墙；慢慢地，你习惯了生活在其中；最终你会发现自己不得不依靠它而生存。这就叫体制化。</li>
</ul>
</blockquote>

<p>所以趁着在体制化的泥潭中还没有陷得太深，让我们尝点新鲜的玩意儿吧———学习一门 C 家族以外的语言，一门带你进入全新领域的语言。</p>

<p>对，<code>Erlang</code> 看起来是个很不错的选择！</p>

<hr />

<h1>为什么是 Erlang ?</h1>

<p>Erlang 最初由 Ericsson 公司为了其“下一代”交换机而开发出来的，已经有了 20 多年的历史（诞生于 1987 年，1998 年开源）。</p>

<p>Erlang 以 <a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a> 语言为基础，加入了 <a href="http://en.wikipedia.org/wiki/Functional_programming">函数式编程</a> 的特性，加之其难以理解的语法，使她看起来真是一门古怪的语言。</p>

<p>然而，Erlang 这门语言融合了几乎最优秀的设计哲学，（她的设计思想）领先当今时代至少 10 年。</p>

<p>（真这么牛逼？）容我慢慢道来。</p>

<h2>几乎无副作用</h2>

<p>作为一门函数语言， Erlang 摒弃了 <code>共享状态</code> 的概念。变量只能被 <code>绑定</code>，（一旦完成绑定，变量的值就）不能被改变。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1&gt; <span class="nv">X</span> <span class="o">=</span> 1.
</span><span class='line'>1
</span><span class='line'>2&gt; <span class="nv">X</span> <span class="o">=</span> X + 1.
</span><span class='line'>** exception error: no match of right hand side value 2
</span><span class='line'>3&gt; <span class="nv">X</span> <span class="o">=</span> 2.
</span><span class='line'>** exception error: no match of right hand side value 2
</span></code></pre></td></tr></table></div></figure>


<p>这保证了你能写出没有副作用的函数，也就是说，用相同的参数多次调用一个函数，返回值是一样的。这是 Erlang 一个很重要的优点，它带来的好处是：</p>

<blockquote><ul>
<li><strong>你（几乎）不需要去保护所谓的 <code>临界区</code>。</strong> 想一想并发环境下的 C 代码，你需要使用若干 <code>同步原语</code> 来保护数据不被破坏。糟糕的同步实现还会给系统带来底下的性能和不稳定性。这是让很多 C 程序员头疼的地方。</li>
<li><strong>底层优化变得容易。</strong> 因为编译器知道一个变量一旦完成绑定将不再改变，它可以对寄存器的使用采用相当激进的优化策略。</li>
<li><strong>垃圾回收变得容易。</strong> 可怜的 Java 虚拟机，为了确定一个变量是否可回收可没那么轻松，因为它可能被别的变量所引用，可能还会被使用或者改变。Erlang 不同，一个变量的作用域仅在当前函数，没有其他的代码会访问到它，更别说改变它的值了。(感兴趣的话，可以进一步了解一下 <a href="http://stackoverflow.com/questions/10221907/garbage-collection-and-memory-management-in-erlang">Erlang 的垃圾收集和内存管理</a>。)</li>
</ul>
</blockquote>

<h2>内建的 异步/并发 机制</h2>

<p>Erlang 内建了对 <code>并发/异步</code> 机制的支持，其背后的思想是 <a href="http://en.wikipedia.org/wiki/Actor_model">Actor 模式</a>。在 1986 年的时候，在那个 <code>多核</code>，<code>多线程</code>，甚至 <code>SMP</code>（对称多处理）这些术语还不为人所知的年代，这是多么富有远见的创造啊！</p>

<h3>轻量级进程</h3>

<p>为了支持并发，Erlang 在她的虚拟机中创建自己的轻量级进程。</p>

<blockquote><ul>
<li>你可以同时创建 <code>上百万</code> 个进程，也不会有操作系统资源瓶颈的问题。</li>
<li>并且，进程的创建是如此快速———在奔腾4 CPU上这个速度是 350,000 个/每秒。</li>
<li>Erlang 进程占用的内存资源也非常小——仅在 KB 的粒度（最小可达到约300字节）。操作系统层次的进程动辄 MB 的粒度</li>
<li>进程调度方面，Erlang 支持 <a href="http://en.wikipedia.org/wiki/Real-time_computing#Soft">软实时</a> 调度。并且 上下文切换 的代价非常小——在现代处理器上，Erlang 进程间切换仅需要 <code>16</code> 个指令周期和 <code>20</code> 纳秒（<a href="http://stackoverflow.com/questions/2708033/technically-why-are-processes-in-erlang-more-efficient-than-os-threads">参考</a>）。如果你对进程调度感兴趣，可参阅 <a href="http://jlouisramblings.blogspot.com/2013/01/how-Erlang-does-scheduling.html">Erlang 如何调度</a>。</li>
</ul>
</blockquote>

<h3>消息传递</h3>

<p>Erlang 使用 <code>消息传递</code> 来进行 <code>进程间通信</code>，这是继承自 Actor 模式 的方法。
每个 Erlang 进程都有用来存储传入 <code>消息</code> 的 <code>信箱</code>。
得益于内建进程和进程间的消息传递等机制， Erlang 是完全异步的。</p>

<h4>实例</h4>

<p><code>代码</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">echo_server</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">rpc</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">rpc</span><span class="p">(</span><span class="nv">Pid</span><span class="p">,</span> <span class="nv">Request</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Pid</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Request</span><span class="p">},</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Response</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">Response</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="p">{</span><span class="n">message</span><span class="p">,</span> <span class="nv">Message</span><span class="p">}}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">From</span> <span class="o">!</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Message</span><span class="p">},</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="nv">Request</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">From</span> <span class="o">!</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Request</span><span class="p">},</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>命令行执行</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1&gt; c<span class="o">(</span>echo_server<span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,echo_server<span class="o">}</span>
</span><span class='line'>2&gt; <span class="nv">Pid</span> <span class="o">=</span> spawn<span class="o">(</span>fun echo_server:loop/0<span class="o">)</span>.
</span><span class='line'>&lt;0.42.0&gt;
</span><span class='line'>3&gt; echo_server:rpc<span class="o">(</span>Pid, <span class="o">{</span>message, <span class="s2">&quot;Hello world!&quot;</span><span class="o">})</span>.
</span><span class='line'><span class="o">{</span>ok,<span class="s2">&quot;Hello world!&quot;</span><span class="o">}</span>
</span><span class='line'>4&gt; echo_server:rpc<span class="o">(</span>Pid, <span class="o">{</span>message1, <span class="s2">&quot;Hello world!&quot;</span><span class="o">})</span>.
</span><span class='line'><span class="o">{</span>error,<span class="o">{</span>message1,<span class="s2">&quot;Hello world!&quot;</span><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>希望你没被上面这些语法和函数式编程的语句吓到。我不打算对代码细节进行展开，简单点说，这段代码创建了一个回显服务器，并向该服务器发送消息。</p>

<p>使用 <code>spawn</code>，<code>!</code>(消息传递关键字) 和 <code>receive</code>，我们仅用几行代码就完成了服务端的创建。对比一下，在 C，Java，Python，Ruby 或者 node.js 中如何完成相同的任务，你就会发现 Erlang 是多么的优雅！</p>

<p><code>Actor</code> 模式对于 <code>并发</code> 是如此的重要，以至于一些现代的语言比如 <a href="http://golang.org/">Golong</a> 也在语言层面上对它进行支持。我对 Golang 并不熟悉，但是（我知道）它允许共享内存，因此在 Golang 中进行并发编程可能仍然需要同步的工作。并且，我认为 Golang 并不支持软实时，因为这是 Erlang 的设计目标而非 Golang 的。</p>

<p>诸如 Java，Python 和 Rudy 等其他语言，则使用 <code>库</code> 的方式对 Actor 模式进行支持。对其 <code>效率</code> 我持质疑的态度。只有把 <code>协程</code> 及其 <code>调度</code> 放到 <code>虚拟机</code> 层面，你才能获得最好的性能。（这段话不甚理解，mark）</p>

<h2>可扩展性</h2>

<p>从前面的例子可以看出在 Erlang 里我们的代码看起来结构相对松散些（是这个意思不？）。加上内建的并发支持，Erlang 应用程序相当容易扩展。你可以从一个节点将代码分发到多个节点，分发到局域网内多台机器上，甚至分发到其他网络的服务器上，而只需要额外一点点代码。这是因为：</p>

<blockquote><ul>
<li>Erlang 允许你在远程节点上创建进程</li>
<li>Erlang 允许你用如同跟本地进程交互一样的方式，与远程进程进行交互</li>
</ul>
</blockquote>

<p>对前面的程序稍加改动 (添加一个函数), 我们就能够将其分发到 2 个 Erlang 节点上去：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">register</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="k">fun</span> <span class="n">loop</span><span class="o">/</span><span class="mi">0</span><span class="p">)).</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  Erlang-programming-examples  erl -sname weasley
</span><span class='line'>Erlang R16B <span class="o">(</span>erts-5.10.1<span class="o">)</span> <span class="o">[</span><span class="nb">source</span><span class="o">]</span> <span class="o">[</span>64-bit<span class="o">]</span> <span class="o">[</span>smp:8:8<span class="o">]</span> <span class="o">[</span>async-threads:10<span class="o">]</span> <span class="o">[</span>hipe<span class="o">]</span> <span class="o">[</span>kernel-poll:false<span class="o">]</span> <span class="o">[</span>dtrace<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Eshell V5.10.1  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'><span class="o">(</span>weasley@cnrd-tchen-mbp<span class="o">)</span>1&gt; c<span class="o">(</span>echo_server<span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,echo_server<span class="o">}</span>
</span><span class='line'><span class="o">(</span>weasley@cnrd-tchen-mbp<span class="o">)</span>2&gt; echo_server:start<span class="o">()</span>.
</span><span class='line'><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>➜  Erlang-programming-examples  erl -sname potter
</span><span class='line'>Erlang R16B <span class="o">(</span>erts-5.10.1<span class="o">)</span> <span class="o">[</span><span class="nb">source</span><span class="o">]</span> <span class="o">[</span>64-bit<span class="o">]</span> <span class="o">[</span>smp:8:8<span class="o">]</span> <span class="o">[</span>async-threads:10<span class="o">]</span> <span class="o">[</span>hipe<span class="o">]</span> <span class="o">[</span>kernel-poll:false<span class="o">]</span> <span class="o">[</span>dtrace<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Eshell V5.10.1  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'><span class="o">(</span>potter@cnrd-tchen-mbp<span class="o">)</span>1&gt; rpc:call<span class="o">(</span><span class="s1">&#39;weasley@cnrd-tchen-mbp&#39;</span>, echo_server, rpc, <span class="o">[{</span>message, <span class="s2">&quot;Hurry up, Harry!&quot;</span><span class="o">}])</span>.
</span><span class='line'><span class="o">{</span>ok,<span class="s2">&quot;Hurry up, Harry!&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>热更新</h2>

<p>这是每个系统程序员梦寐以求的特性啊！看看你为客户提供的那些实现起来单调乏味的所谓 <code>热补丁</code> 的解决方案，不断的删改，看起来又很不得体，有着很大的局限性。但是 Erlang 正好相反，她yi yi zhongsupports hot code reload in an elegant manner.</p>

<p>沿用前面的例子，我们通过修改一点代码以便待会能够动态更新运行中的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">echo_server_general</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">rpc</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">swap_code</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="k">fun</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">loop</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">)</span> <span class="k">end</span><span class="p">)).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">swap_code</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">rpc</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="p">{</span><span class="n">swap_code</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">rpc</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Request</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Name</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Request</span><span class="p">},</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Response</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="nv">Response</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="p">{</span><span class="n">swap_code</span><span class="p">,</span> <span class="nv">NewMod</span><span class="p">}}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">From</span> <span class="o">!</span> <span class="p">{</span><span class="nv">Name</span><span class="p">,</span> <span class="n">ack</span><span class="p">},</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">NewMod</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="nv">Request</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">Response</span>  <span class="o">=</span> <span class="nv">Mod</span><span class="p">:</span><span class="nf">handle</span><span class="p">(</span><span class="nv">Request</span><span class="p">),</span>
</span><span class='line'>            <span class="nv">From</span> <span class="o">!</span> <span class="p">{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Response</span><span class="p">},</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">echo_server</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">echo</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">handle</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">echo</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">echo_server_general</span><span class="p">:</span><span class="nf">rpc</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="p">{</span><span class="n">echo</span><span class="p">,</span> <span class="nv">Message</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle</span><span class="p">({</span><span class="n">echo</span><span class="p">,</span> <span class="nv">Message</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Message</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>weasley@cnrd-tchen-mbp<span class="o">)</span>1&gt; echo_server_general:start<span class="o">(</span>s, echo_server<span class="o">)</span>.
</span><span class='line'><span class="nb">true</span>
</span><span class='line'><span class="o">(</span>weasley@cnrd-tchen-mbp<span class="o">)</span>2&gt; echo_server:echo<span class="o">(</span>s, <span class="s2">&quot;hello world&quot;</span><span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,<span class="s2">&quot;hello world&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在新需求来了——回显服务器需要把消息的首字母转换成大写形式再回显发送。一般情况下，我们需要停掉服务器程序，替换代码，然后重启服务器。但在 Erlang 中，不需要这么麻烦。</p>

<p>代码修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">echo_server</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">echo</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">handle</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">echo</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">echo_server_general</span><span class="p">:</span><span class="nf">rpc</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="p">{</span><span class="n">echo</span><span class="p">,</span> <span class="nv">Message</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle</span><span class="p">({</span><span class="n">echo</span><span class="p">,</span> <span class="nv">Message</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">capfirst</span><span class="p">(</span><span class="nv">Message</span><span class="p">)}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">capfirst</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">])</span> <span class="k">when</span> <span class="nv">H</span> <span class="o">&gt;=</span> <span class="sc">$a</span><span class="p">,</span> <span class="nv">H</span> <span class="o">=&lt;</span> <span class="sc">$z</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">H</span> <span class="o">+</span> <span class="p">(</span><span class="sc">$A</span> <span class="o">-</span> <span class="sc">$a</span><span class="p">)|</span><span class="nv">T</span><span class="p">];</span>
</span><span class='line'><span class="nf">capfirst</span><span class="p">(</span><span class="nv">Others</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Others</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>weasley@cnrd-tchen-mbp<span class="o">)</span>4&gt; c<span class="o">(</span>echo_server<span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,echo_server<span class="o">}</span>
</span><span class='line'><span class="o">(</span>weasley@cnrd-tchen-mbp<span class="o">)</span>5&gt; echo_server_general:swap_code<span class="o">(</span>s, echo_server<span class="o">)</span>.
</span><span class='line'>ack
</span><span class='line'><span class="o">(</span>weasley@cnrd-tchen-mbp<span class="o">)</span>6&gt; echo_server:echo<span class="o">(</span>s, <span class="s2">&quot;hello world&quot;</span><span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,<span class="s2">&quot;Hello world&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>热更新的特性不仅对于有着高可用性要求的服务非常有用，对于软件的开发生命周期同样很有帮助。你不需要浪费许多时间在停服，更新程序，然后重启这种事情上，而且有时候仅仅只是更新了很少量的几行代码而已。</p>

<p>我看过几篇声称热更新在现实中并不是很有用的文章，他们担心热更新的方式会带来模块版本管理上的混乱。这是可以理解的，人们对于未知的事物，对于超出其知识范围和视野的事物，总会有恐惧心理的。（我相信）10年以后，当有相应的软件管理工具和理论问世以后，热更新的强大之处将会彰显出来。（我只能说）Erlang 是如此的前卫，以致于在她问世 20 多年之后，她的设计哲学仍然领先于当今时代。</p>

<h2>容错机制</h2>

<p>高达 <code>nine nines</code>（99.9999999%）的系统可用性是软件工业一直在追求的目标。然后，人总是会犯错的，其创造出来的软件当然也免不了出错。<code>墨菲法则</code> 说，任何可能出错的事终将出错。认识到我们终将无法避免错误，那么最重要的问题就是：软件如何健壮地应对错误（并继续正常运作）？</p>

<p>其他的一些语言鼓励程序员使用防御性的编程策略来保证程序不致因为某些错误而奔溃，但 Erlang 的思想则是 “<code>让它奔溃吧</code>” ！这是为何？</p>

<p>如果为你建造的房子是这样的，只要某个窗户坏掉了整栋房子就会倒塌，你会住进去吗？答案是显而易见的！你需要的房子应该在这种情况下仍然可以安全居住，稍后叫人来修窗户就行了。</p>

<p>这就是用 C 和 Erlang 编写的程序之间的区别。只要知道如何从错误中恢复，软件出错就不是一个多么严重的问题了。在 Erlang 里：</p>

<blockquote><ul>
<li>一个进程的奔溃不会影响到其他不相关的进程</li>
<li>一个进程出错以后在退出前，会向与它关联的进程发送通知（hey，我要退出了！）</li>
<li>可以使用监控者来恢复奔溃的程序，比如重启进程。</li>
</ul>
</blockquote>

<h2>速度</h2>

<p>与 C 语言相比，Erlang 代码在性能上有几点劣势：</p>

<blockquote><ul>
<li>代码运行于虚拟机之上</li>
<li>运行时类型推导</li>
<li>模式匹配</li>
<li>其他&hellip;</li>
</ul>
</blockquote>

<p>那么 Erlang 到底有多慢？参考<a href="http://stackoverflow.com/questions/6964392/speed-comparison-with-project-euler-c-vs-python-vs-Erlang-vs-haskell">这篇文章</a>，我在自己的mbp上做了如下测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  comparison  <span class="nb">time</span> ./euler12.bin
</span><span class='line'>842161320
</span><span class='line'>./euler12.bin  5.90s user 0.01s system 99% cpu 5.910 total
</span><span class='line'>➜  comparison  <span class="nb">time </span>erl -noshell -s euler12 solve
</span><span class='line'>842161320
</span><span class='line'>erl -noshell -s euler12 solve  11.09s user 0.19s system 100% cpu 11.269 total
</span><span class='line'>➜  comparison  <span class="nb">time </span>pypy euler12.py
</span><span class='line'>842161320
</span><span class='line'>pypy euler12.py  9.92s user 0.05s system 96% cpu 10.305 total
</span><span class='line'>➜  comparison  <span class="nb">time</span> ./euler12.py
</span><span class='line'>842161320
</span><span class='line'>./euler12.py  66.32s user 0.04s system 99% cpu 1:06.43 total
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，C 代码几乎比 Erlang 快了 1 倍。（但是）考虑到 Erlang 带来的好处，这已经是很不错的数据了。想想 （Erlang 所擅长的）I/O 密集型、并发/分布式场景，Erlang 毫无疑问地胜出了。</p>

<p>虽然现在 Erlang 在性能上无法超越 C，但将来单个芯片裸片（DIE）上有成百上千个核的时候，这一天会到来的。</p>

<h2>应用</h2>

<p>有不少著名的软件是基于 Erlang 开发的：</p>

<blockquote><ul>
<li><a href="http://couchdb.apache.org/">CouchDB</a>. 一个 NoSql 数据库。</li>
<li><a href="http://www.rabbitmq.com/">RabbitMQ</a>. 一个分布式消息队列系统。</li>
<li><a href="http://www.ejabberd.im/">ejabberd</a>. 一个即时通信服务器。</li>
<li><a href="http://www.adelcogroup.com/EricssonAXD301.htm">AXD301 ATM switch</a>. 这很可能是世界上唯一一个能够达到 <code>nine nines</code> 可用性的系统了，它已经连续正常运行了超过 20 年！</li>
<li>还有很多其他的公司，包括 <code>Amazon</code>, <code>Facebook</code>, <code>Yahoo!</code>, <code>T-Mobile</code> 等，都在他们的系统中使用了 Erlang，参考 <a href="http://stackoverflow.com/questions/1636455/where-is-Erlang-used-and-why">Where is Erlang used and why?</a></li>
</ul>
</blockquote>

<hr />

<h1>如何学习 Erlang</h1>

<p>Erlang 学习起来确实相当困难，但是一旦你掌握了她，你就是 <code>the king</code>。我很欣赏下面这段话，摘自著名 Erlang Web MVC 框架 <a href="http://www.chicagoboss.org/ng-used-and-why">Chicago Boss</a> 的作者 Evan Miller 撰写的一篇名为 <a href="http://www.evanmiller.org/joy-of-erlang.html">Joy of erlang</a> 的文章：</p>

<blockquote><ul>
<li>In the movie Avatar, there&rsquo;s this big badass bird-brained pterodactyl thing called a Toruk that the main character must learn to ride in order to regain the trust of the blue people. As a general rule, Toruks do not like to be ridden, but if you fight one, subdue it, and then link your Blue Man ponytail to the Toruk&rsquo;s ptero-tail, you get to own the thing for life. Owning a Toruk is awesome; it&rsquo;s like owning a flying car you can control with your mind, which comes in handy when battling large chemical companies, impressing future colleagues, or delivering a pizza. But learning to ride a Toruk is dangerous, and very few people succeed.</li>
</ul>
</blockquote>

<p><img src="http://tchen.me/assets/files/snapshots/toruk.jpg" alt="阿凡达" /></p>

<p>这段话生动地反映了我学习 Erlang 的困难程度。顺便说一句，我距离攻克她还远着呢～～～</p>

<p>在学习 Erlang 之前，我熟练掌握了 C、Python 和 Javascript，对 C++、Java 和 Ruby 也有所涉略。我的思维也是早已习惯了命令式编程，因此最大的挑战就是要去适应函数式编程，这需要做出思维上巨大的转变。</p>

<h2>变量不变</h2>

<p>变量只能绑定某个值，而无法更改，这让我突然间不会编程了！
举个例子，要求在不使用任何辅助函数（例如map）的情况下实现 upper(str) 函数。</p>

<p>在 Python 中这简直太简单且直接了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">upper</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
</span><span class='line'>    <span class="n">str1</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">:</span>
</span><span class='line'>        <span class="n">str1</span> <span class="o">+=</span> <span class="n">c</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">str1</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在 Erlang 中，无法改变变量的值，该如何实现呢？
诀窍在于一个累积器的概念，下面这个范例，请在以后编写 Erlang 程序的时候时刻记着。代码看起来是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">upper</span><span class="p">(</span><span class="nv">S</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">upper</span><span class="p">(</span><span class="nv">S</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">upper</span><span class="p">([],</span> <span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">N</span><span class="p">);</span>
</span><span class='line'><span class="nf">upper</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nv">H</span> <span class="o">&gt;</span> <span class="sc">$a</span><span class="p">,</span> <span class="nv">H</span> <span class="o">=&lt;</span> <span class="sc">$z</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">upper</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span> <span class="o">+</span> <span class="p">(</span><span class="sc">$A</span> <span class="o">-</span> <span class="sc">$a</span><span class="p">)|</span><span class="nv">N</span><span class="p">]);</span>
</span><span class='line'><span class="nf">upper</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">upper</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">N</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数本身不包含任何内部变量的状态改变，但我们使用一个通过参数传入的累积器，实现了同样的功能。这是函数式编程里面的一个很基础的范例，理解并记住它，要么请放弃 Erlang。</p>

<h2>模式匹配</h2>

<p>模式匹配使得 Erlang 程序看起来既优雅又易于理解。</p>

<p>在 C 语言中，一个函数在它的作用域中必须是唯一的，你不能定义了一个函数 <code>fun(x)</code>，再定义一个函数 <code>fun(x,y)</code>，但在 Erlang 中就没有这个限制了。你可以随意定义多个（同名）函数，只要它们的参数是不一样的，你也可以为一个函数定义多个子句，只要它们匹配的模式不同。</p>

<p>仍旧以上面的 <code>upper()</code> 函数为例，调用 <code>upper("#hello")</code> 时:</p>

<blockquote><ul>
<li>由于只有一个参数，该调用匹配 <code>upper(S)</code>，因此接着调用 <code>upper("#hello", [])</code></li>
<li><code>"#hello"</code> 不匹配 <code>[]</code>，并且第一个字符  <code>"#"</code> 不匹配 guard 条件，故调用 <code>upper("#hello", [])</code> 匹配 <code>upper([H|T], N)</code>，因此接着调用 <code>upper("hello", [$#])</code></li>
<li>接下来的各个调用匹配 <code>upper([H|T], N) when H &gt; $a, H =&lt; $z</code>，每个调用将一个字符转换为大写，调用序列为：</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">upper</span><span class="p">(</span><span class="s">&quot;ello&quot;</span><span class="p">,</span> <span class="p">[</span><span class="sc">$H</span><span class="p">,</span> <span class="sc">$#</span><span class="p">])</span>
</span><span class='line'><span class="nf">upper</span><span class="p">(</span><span class="s">&quot;llo&quot;</span><span class="p">,</span> <span class="p">[</span><span class="sc">$E</span><span class="p">,</span> <span class="sc">$H</span><span class="p">,</span> <span class="sc">$#</span><span class="p">])</span>
</span><span class='line'><span class="nf">upper</span><span class="p">(</span><span class="s">&quot;lo&quot;</span><span class="p">,</span> <span class="p">[</span><span class="sc">$L</span><span class="p">,</span> <span class="sc">$E</span><span class="p">,</span> <span class="sc">$H</span><span class="p">,</span> <span class="sc">$#</span><span class="p">])</span>
</span><span class='line'><span class="nf">upper</span><span class="p">(</span><span class="s">&quot;o&quot;</span><span class="p">,</span> <span class="p">[</span><span class="sc">$L</span><span class="p">,</span> <span class="sc">$L</span><span class="p">,</span> <span class="sc">$E</span><span class="p">,</span> <span class="sc">$H</span><span class="p">,</span> <span class="sc">$#</span><span class="p">])</span>
</span><span class='line'><span class="nf">upper</span><span class="p">([],</span> <span class="p">[</span><span class="sc">$O</span><span class="p">,</span> <span class="sc">$L</span><span class="p">,</span> <span class="sc">$L</span><span class="p">,</span> <span class="sc">$E</span><span class="p">,</span> <span class="sc">$H</span><span class="p">,</span> <span class="sc">$#</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><ul>
<li>最后，<code>upper([], [$O, $L, $L, $E, $H, $#])</code> 匹配 <code>upper([], N), lists:reverse(N)</code></li>
</ul>
</blockquote>

<p>模式匹配让你能够将代码逻辑进行分拆，这使得函数的每个子句变得更小、更具可读性。这就是为什么我们经常可以看到 C 函数动辄超过 100 行代码，而 Erlang 函数通常不会超过 20 行的原因。</p>

<h2>递归魔法</h2>

<p>学习 C 编程的时候，我被告知 <code>递归是有害的</code>，应当尽可能避免使用它。但在函数式编程的世界里，完全就是另外一回事了。</p>

<p>回头看看上文的所有代码，你有看到循环语句吗？没有。递归函数呢？到处都是。在需要迭代或递归的场景里，递归取代了 <code>for/while</code> 循环，代码看起来非常简洁。为什么会是这样呢？回想一下 C 语言的 <code>for</code> 循环，其实包含了状态改变，每次循环里修改迭代器的值，直到它满足了退出的条件，跳出循环。但 Erlang 不允许内部状态的改变，所以她使用递归取代了通常的 <code>for/while</code> 循环。</p>

<p>但是，对此你心有疑虑&hellip;</p>

<h3>递归的性能很差</h3>

<p>这其实是一个 <code>伪命题</code>。</p>

<p>让我举个例子。我们通常认为，通过寄存器传递参数要远比通过堆栈传递快得多，函数调用中，Intel CPU 由于缺少足够的通用寄存器（相比较RISC CPU），因此它非常依赖堆栈的 <code>push/pop</code> 操作。为了提高性能它引入了寄存器栈，这让 <code>push/pop</code> 操作变得和操作寄存器一样快。</p>

<p>让我们看回递归，我们在 C 中很少使用递归，并且根据 <code>80/20</code> 法则（什么意思？），没有必要马上对递归进行优化，对吧？而对 Erlang 而言，递归就是代码的生命，编译器岂敢不对其进行优化！所以说吧，你的直觉是不对的 —— 递归并非天生就是很慢的，在 C 里面它确实慢，但在 Erlang 里，它非常快。</p>

<h3>递归很容易导致堆栈溢出</h3>

<p>这个论断也并不十分准确，如果你以正确的方式编写程序的话。在递归中 Erlang 对堆栈操作做了优化，尤其是尾递归。举例说明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="nv">N</span> <span class="o">*</span> <span class="n">fac</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这不是一个尾递归，因为堆栈数据必须保存下来做进一步计算。让我们把它改成尾递归的版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">fac1</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fac1</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fac1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">M</span><span class="p">;</span>
</span><span class='line'><span class="nf">fac1</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">M</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">fac1</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">N</span> <span class="o">*</span> <span class="nv">M</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>每进行一次递归调用，我们都能够安全地把上一次递归调用产生的堆栈数据丢弃，这就是尾递归。尾递归的好处是，你只需要保存少量并且固定大小的内存数据，所以不需要担心长时间运行的递归程序会有堆栈溢出的问题。</p>

<p>在 Erlang 里你可以尽可能地使用尾递归编程。</p>

<h2>函数式编程</h2>

<p>特别关注一下那些可以被递归访问的数据，例如 list（包括string），list 可以做如下处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">retrieve</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="nv">H</span><span class="p">,</span> <span class="nv">T</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% or even</span>
</span><span class='line'><span class="nf">retrieve1</span><span class="p">([</span><span class="nv">H1</span><span class="p">,</span> <span class="nv">H2</span><span class="p">|</span><span class="nv">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="nv">H1</span><span class="p">,</span> <span class="nv">H2</span><span class="p">,</span> <span class="nv">T</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>请牢记 map/reduce 的概念。</p>

<p>对于算法问题，想一想如何通过数学公式来实现它，如果落地到了具体的数学公式了，那么这样的问题应该很容易用 Erlang 来编程解决。分而治之，不要被细节问题所迷惑。</p>

<p>我们用 atoi(S) 函数为例，公式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>     <span class="p">|</span>- S<span class="o">[</span>0<span class="o">]</span> is <span class="s1">&#39;-&#39;</span>:  -1 * atoi<span class="o">(</span>S<span class="o">[</span>1:<span class="o">]</span>, 0<span class="o">)</span>
</span><span class='line'>atoi<span class="o">(</span>S<span class="o">)</span> -+
</span><span class='line'>     <span class="p">|</span>- <span class="k">else</span>:         atoi<span class="o">(</span>S, 0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="p">|</span>- S is <span class="o">[]</span>:       Acc
</span><span class='line'>atoi<span class="o">(</span>S, Acc<span class="o">)</span> -+- S<span class="o">[</span>X<span class="o">]</span> is digit: atoi<span class="o">(</span>S<span class="o">[</span>X+1:<span class="o">]</span>, <span class="m">10</span> * Acc + digit<span class="o">(</span>S<span class="o">))</span>
</span><span class='line'>          <span class="p">|</span>- <span class="k">else</span>:          Acc
</span></code></pre></td></tr></table></div></figure>


<p>实现代码例子如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">math</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">atoi</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">atoi</span><span class="p">([</span><span class="sc">$-</span><span class="p">|</span><span class="nv">S</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">atoi</span><span class="p">(</span><span class="nv">S</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nf">atoi</span><span class="p">(</span><span class="nv">S</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">atoi</span><span class="p">(</span><span class="nv">S</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">atoi</span><span class="p">([],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class='line'><span class="nf">atoi</span><span class="p">([</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="k">when</span> <span class="nv">H</span> <span class="o">&gt;=</span> <span class="sc">$0</span><span class="p">,</span> <span class="nv">H</span> <span class="o">=&lt;</span> <span class="sc">$9</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">atoi</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="nv">Acc</span> <span class="o">+</span> <span class="p">(</span><span class="nv">H</span> <span class="o">-</span> <span class="sc">$0</span><span class="p">));</span>
</span><span class='line'><span class="nf">atoi</span><span class="p">(_</span><span class="nv">S</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>比较一下 atoi() 函数的 C 实现，Erlang 的实现版本更直观反映了其算法逻辑，你几乎能一次就编写出正确的代码。</p>

<h2>拥抱进程</h2>

<p>进程使用起来并不难，它以一种结构相对松散的、异步的方式组织起你的系统。你只需要去习惯它，将它当作一个 worker，一个 object，或者其他类似的东西。</p>

<h2>让它出错吧</h2>

<p>C 程序员通常需要在编程时考虑覆盖尽可能多的参数值条件，而 Erlang 程序员则不需要如此，看这个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% good code</span>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fac</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span> <span class="o">*</span> <span class="nv">N</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% bad code</span>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">N</span><span class="p">),</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span>                           <span class="o">-&gt;</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="s">&quot;argument must be positive integer&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class='line'><span class="nf">fac</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fac</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span> <span class="o">*</span> <span class="nv">N</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>用非法参数调用第一段代码将会导致异常：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1&gt; c<span class="o">(</span>math<span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,math<span class="o">}</span>
</span><span class='line'>2&gt; math:fac<span class="o">(</span>10<span class="o">)</span>.
</span><span class='line'>3628800
</span><span class='line'>3&gt; math:fac<span class="o">(</span>-10<span class="o">)</span>.
</span><span class='line'>** exception error: no <span class="k">function</span> clause matching math:fac<span class="o">(</span>-10<span class="o">)</span> <span class="o">(</span>math.erl, line 14<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要为负数的情况编写代码吗？C 程序需要，Erlang 不需要！用负数调用时，第二段代码使得程序得以继续运行，但是给调用者增加了不必要的处理，调用者需要为此添加额外的代码，给程序徒增复杂性。还是直接让进程退出吧，我们只在真正需要异常处理的场景里为此操心就行了。</p>

<hr />

<h1>Erlang 学习资料</h1>

<p>恭喜你！读完了这篇文章，你将可以开始学习驯服属于你的那只 Toruk了，下面是对你很有帮助的一些 <code>武器</code>：</p>

<blockquote><ul>
<li><strong>Joe Armstrong</strong> 的经典之作 《 <strong>Programming Erlang - software for a concurrent world</strong> 》。学习一门语言最好的途径是阅读该门语言作者的作品，我力荐你好好读一读这本书，尤其是里面有关 <code>顺序编程</code>、<code>并发编程</code> 和 <code>OTP</code> 的章节。</li>
<li><a href="http://www.erlang.org/doc/">Erlang doc</a>。有任何疑问时作为参考。</li>
<li>用 Erlang 编程解决你日常工作中遇到的问题，以下例子可供参考：

<ul>
<li>给定一个文件，计算经典的 wordcount</li>
<li>实现 cloc (给定一个目录，计算不同语言的代码行数)</li>
<li>编写一个消息服务器，将 topN 未读消息保存在内存，其余的保存在 mnesia 中</li>
<li>编写一个 markdown 格式解析器</li>
<li>基于 mochiweb 编写一个 web 框架</li>
<li>编写一个 L3/L4 防火墙软件用于处理 handles symmetric NAT translation (to focus on the problem itself you should use the data from tcpdump).</li>
</ul>
</li>
<li>阅读开源项目代码，例如 ranch, cowboy, boss_db, 等等。</li>
</ul>
</blockquote>

<p>Hope you have fun!</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding # and ## in C/C++]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/09/15/understanding-number-and-number-number-in-c-slash-c-plus-plus/"/>
    <updated>2014-09-15T00:09:19+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/09/15/understanding-number-and-number-number-in-c-slash-c-plus-plus</id>
    <content type="html"><![CDATA[<p>这两个符号在 C/C++ 语言中属于<code>编译器预处理</code>的范畴，属于编译期概念（而非运行期概念）</p>

<p><strong><code>##</code>连接符</strong> 的功能是在带参数的宏定义中将两个子串(token)连接起来，从而形成一个新的子串。但它不可以是第一个或者最后一个子串</p>

<p><code>所谓的子串就是指编译器能够识别的最小语法单元。具体的定义在编译原理里面有详尽解释，但不知道也无所谓</code></p>

<p><strong><code>#</code>连接符</strong> 的功能是把传递过来的参数当成字符串进行替代，即所谓 <code>字符串化</code></p>

<!-- more -->


<h2>实例说明</h2>

<p>假设程序中已经定义了这样一个带参数的宏：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define paster(n) printf(&quot;token&quot; #n &quot; = %d&quot;, token##n)</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时又定义了一个整型变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">token9</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在在主程序中以下面的方式调用这个宏：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">paster</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么在编译时，上面的这句话被扩展为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;token&quot;</span> <span class="s">&quot;9&quot;</span> <span class="s">&quot; = %d&quot;</span><span class="p">,</span> <span class="n">token9</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果自然就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ token9</span> <span class="o">=</span> 9
</span></code></pre></td></tr></table></div></figure>


<h2>小记</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">## -- 连接两个参数</span>
</span><span class='line'><span class="c">#  -- 字符串化</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Infix Notation in OC]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/09/12/understanding-infix-notation-in-oc/"/>
    <updated>2014-09-12T17:19:20+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/09/12/understanding-infix-notation-in-oc</id>
    <content type="html"><![CDATA[<p>初学 OC ，对其方法的声明语法感到很奇怪。比如：</p>

<p>声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="nl">C</span> <span class="p">:</span> <span class="n">NSObject</span>
</span><span class='line'><span class="o">+</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nl">fun</span><span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">a</span> <span class="nl">second</span><span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">C</span>
</span><span class='line'><span class="o">+</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nl">fun</span><span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">a</span> <span class="nl">second</span><span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">b</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">C</span> <span class="nl">fun</span><span class="p">:</span> <span class="mi">2</span> <span class="nl">second</span><span class="p">:</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>书上说这种语法称为中缀符的形式，我的疑问是：</p>

<blockquote><ul>
<li><code>fun</code> 应该就是方法名吧？那 <code>second</code> 理解为什么？</li>
<li>如果 <code>second</code> 理解为第二个参数的名字，那 <code>b</code> 又是什么？同时 <code>fun</code> 又是什么？</li>
</ul>
</blockquote>

<!-- more -->


<p>好吧我的问题也许有些奇怪，对于一个习惯了 C/C++ 等“正常”语法的人来说，一时没转过弯来。一番 <code>gb</code> 之后，参考了多人的说法，算是基本理解了 OC 的方法参数名。</p>

<p>整理如下：</p>

<blockquote><ul>
<li><strong>方法修饰符</strong></li>
</ul>
</blockquote>

<ol>
<li><code>-</code> 代表此方法是<code>实例方法</code>，必须先生成类实例，通过实例才能调用该方法</li>
<li><code>+</code> 代表此方法是类的<code>静态方法</code>，可以直接调用，而不用生成类实例</li>
</ol>


<blockquote><ul>
<li><strong>参数类型</strong></li>
</ul>
</blockquote>

<p>  a 与 b 分别是两个参数，均为 int 类型</p>

<blockquote><ul>
<li><strong>方法签名</strong></li>
</ul>
</blockquote>

<p>  本例中，fun 和 second 组成了该方法的签名关键字。不过还是有些怪异，这样理解吧，第一个参数是没有参数名的，<strong>如果硬要说有，那就是方法名</strong>，统一说来，见到冒号，冒号前面那个就是参数名</p>

<p>再举例，也可以编写没有参数名的方法定义与调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">+</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nl">fun</span><span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nl">a</span><span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">C</span> <span class="nl">fun</span><span class="p">:</span> <span class="mi">2</span><span class="o">:</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a Hive Generic UDF]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/09/05/writing-a-hive-generic-udf/"/>
    <updated>2014-09-05T05:40:22+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/09/05/writing-a-hive-generic-udf</id>
    <content type="html"><![CDATA[<h2>业务背景</h2>

<p>公司的数据分析业务 ETL 过程中，原始数据经过数据清洗之后，统一转换成自定义的 protobuf <code>CustomEventMessage</code> 格式，用户自定义事件 ( 多个KV对的格式 ) 保存在 <code>event_args</code> 字段中。最终 <code>CustomEventMessage</code> 数据将导入 <code>hive</code> 中，在没有 <code>Protobuf Serde</code> 之前，这需要先将数据重新转换为文本格式。
最后，在 <code>hive</code> 的建表语句中 <code>event_args</code> 字段声明为 <code>MAP</code> 类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">event_args</span> <span class="k">MAP</span><span class="o">&lt;</span><span class="nb">INT</span><span class="p">,</span> <span class="nb">INT</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">or</span>
</span><span class='line'><span class="n">event_args</span> <span class="k">MAP</span><span class="o">&lt;</span><span class="n">STRING</span><span class="p">,</span> <span class="n">STRING</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例来说，某个 <code>event_args</code> 字段带有两个自定义参数 <code>money</code> 和 <code>paytype</code>，转换后的文本内容为：（ Key 1 和 3 是预定的 ）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="mi">1</span><span class="p">:</span><span class="mi">200</span><span class="o">|</span><span class="mi">3</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'><span class="k">or</span>
</span><span class='line'><span class="n">money</span><span class="p">:</span><span class="mi">200</span><span class="o">|</span><span class="n">paytype</span><span class="p">:</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>在后续 hive 查询脚本中引用该字段提取其中特定的事件（ 比如支付类型 <code>paytype</code> ）很简单且直观：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">event_args</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="k">or</span>
</span><span class='line'><span class="n">event_args</span><span class="p">[</span><span class="s1">&#39;paytype&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>存在的问题及对策</h3>

<p>多了转文本这一步骤，维护起来太繁琐，因此开发了 <strong>ProtobufSerde</strong> ，让 <code>hive</code> 能直接支持存取 <code>protobuf</code> 格式的数据，这样 <code>CustomEventMessage</code> 入库 hive 将会方便很多。</p>

<p>当然，现在的 hive 程序也需要做一些相应的调整，比如上述 <code>event_args</code> 字段的读取就麻烦得多了。现在的建表语句变成如下形式（直接对应 proto）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">event_args</span> <span class="nb">ARRAY</span><span class="o">&lt;</span> <span class="n">STRUCT</span><span class="o">&lt;</span><span class="n">key_int</span><span class="p">:</span><span class="nb">BIGINT</span><span class="p">,</span><span class="n">key_str</span><span class="p">:</span><span class="n">STRING</span><span class="p">,</span><span class="n">value_int</span><span class="p">:</span><span class="nb">BIGINT</span><span class="p">,</span><span class="n">value_str</span><span class="p">:</span><span class="n">STRING</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>select</code> 得到的数据格式将是类似这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="p">[</span><span class="err">{</span><span class="ss">&quot;key_int&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="ss">&quot;key_str&quot;</span><span class="p">:</span><span class="ss">&quot;money&quot;</span><span class="p">,</span><span class="ss">&quot;value_int&quot;</span><span class="p">:</span><span class="mi">200</span><span class="p">,</span><span class="ss">&quot;value_str&quot;</span><span class="p">:</span><span class="ss">&quot;200&quot;</span><span class="err">}</span><span class="p">,</span><span class="err">{</span><span class="ss">&quot;key_int&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="ss">&quot;key_str&quot;</span><span class="p">:</span><span class="ss">&quot;paytype&quot;</span><span class="p">,</span><span class="ss">&quot;value_int&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="ss">&quot;value_str&quot;</span><span class="p">:</span><span class="ss">&quot;1&quot;</span><span class="err">}</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里例子中，为了得到 <code>paytype</code>，我们可以在查询语句中这样书写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">event_args</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">value_int</span> <span class="k">FROM</span> <span class="n">s_CustomEventMessage</span> <span class="k">WHERE</span> <span class="n">pyearmonth</span><span class="o">=</span><span class="s1">&#39;201403&#39;</span> <span class="k">and</span> <span class="n">pday</span><span class="o">=</span><span class="s1">&#39;07&#39;</span> <span class="k">and</span> <span class="n">event_id</span><span class="o">=</span><span class="mi">30</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>引入的新问题</h3>

<p>看起来依旧方便的这种写法，基于 <code>2</code> 个前提：</p>

<blockquote><ul>
<li><code>event_args</code> 中有 <code>paytype</code> 事件</li>
<li><code>paytype</code> 自定义事件在 <code>event_args</code> 中是第 <code>2</code> 个 item（ index 1 ）</li>
</ul>
</blockquote>

<p>遗憾的是，这两个条件都没有办法满足。因此现在需要通过 遍历整个 <code>event_args</code> 的内容，找出我们所关心的事件。
OK，很明显，我们需要 <code>UDF</code> 来完成这一任务。</p>

<hr />

<h2>如何编写 Hive GenericUDF</h2>

<p>为编写 UDF，Hive 中提供了两套不同的接口，分别是：</p>

<blockquote><ul>
<li>Simple API - <code>org.apache.hadoop.hive.ql.exec.UDF</code></li>
<li>Complex API - <code>org.apache.hadoop.hive.ql.udf.generic.GenericUDF</code></li>
</ul>
</blockquote>

<p><code>UDF</code> 接口非常容易编写，但其局限性在于它只适用于函数输入参数和返回值都是 <code>Java原生类型</code> 的场景，这里我们的输入参数类型是 <code>ARRAY&lt; STRUCT&lt;key_int:BIGINT,key_str:STRING,value_int:BIGINT,value_str:STRING&gt; &gt;</code>，返回值是 <code>BIGINT</code> 或者 <code>STRING</code> 类型，因此 <code>UDF</code> 接口满足不了需求。</p>

<p>GenericUDF 是 Hive UDFs 中的 <strong>瑞士军刀</strong>，适用处理 Hive 的复杂类型如 <code>MAP</code>、<code>ARRAY</code>、<code>STRUCT</code> 以及在此之上的各种嵌套类型。下面我们就使用它来完成这一任务。</p>

<h3>几点准备知识：</h3>

<blockquote><ul>
<li>UDF 函数通过 <code>ObjectInspector</code> 来访问传入的参数，因此 <code>ObjectInspector</code> 的概念很重要
（对于 ObjectInspector 不太懂，等了解学习以后单独写个文档介绍）</li>
<li>GenericUDFs 中使用的很多函数，特别是 <code>ObjectInspector</code> 的众多子类函数，返回 <code>Object</code> 类型，这意味着：
（1） 编译器无法帮助我们做类型检查
（2） 很多时候我们不知道拿到手的对象的实际类型（hadoop 的 tasklogs 是很有用的工具，可以借助它来调试）</li>
</ul>
</blockquote>

<p>所有的自定义 <code>GenericUDFs</code> 继承自 <code>GenericUDF</code> 类，因此需要实现以下三个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">ObjectInspector</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">ObjectInspector</span><span class="o">[]</span> <span class="n">arguments</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">evaluate</span><span class="o">(</span><span class="n">DeferredObject</span><span class="o">[]</span> <span class="n">arguments</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getDisplayString</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">children</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1） initialize()函数</h3>

<p>initialize() 函数在 UDF 第一次调用时执行，主要完成四件事：</p>

<blockquote><ul>
<li>检查输入参数类型（在我们的例子中，即 <code>array&lt;struct&lt;key_int:bigint,key_str:string,value_int:bigint,value_str:string&gt;&gt;</code> 和 <code>string</code>）</li>
<li>设置并返回一个跟函数返回值匹配的 <code>ObjectInspector</code> 对象</li>
<li>把输入参数中用到的各种 <code>ObjectInspectors</code> 保存到全局变量中</li>
<li>设置返回值</li>
</ul>
</blockquote>

<h3>2）evaluate() 函数</h3>

<p>evaluate() 函数接收输入实参，完成计算后返回结果。如前所述，我们通过各种 <code>ObjectInspectors</code> 来访问传入的参数，<code>ObjectInspectors</code> 是由我们在 initialize() 函数中保存起来的。我们需要知道：</p>

<blockquote><ul>
<li>array&lt;> 在 Java 中用 ArrayList&lt;> 来表示</li>
<li>struct&lt;> 在 Java 中用 Object[] 来表示</li>
<li>使用 hadoop 的 Writable 和 Text 类而非 Java 原生类型</li>
</ul>
</blockquote>

<h3>3） getDisplayString() 函数</h3>

<p>不那么重要，我们只需返回一个字符串，表示该 UDF 是干什么的就行了，在我们使用 <code>EXPLAIN</code> 调试 <code>hql</code> 语句时，该信息会被输出。</p>

<hr />

<h2>代码实现</h2>

<p>代码中已经有了详尽的注释来解释每一个步骤，可以参考着上面的内容来理解。不再详述。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mjyun</span><span class="o">.</span><span class="na">hive</span><span class="o">.</span><span class="na">udf</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.LongWritable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.IntWritable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.ql.exec.UDFArgumentException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.ql.exec.UDFArgumentTypeException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.ql.metadata.HiveException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.ql.udf.generic.GenericUDF</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector.Category</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.StandardListObjectInspector</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.StructField</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.objectinspector.primitive.LongObjectInspector</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.lazy.LazyString</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hive.serde2.lazy.LazyLong</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UDFGetValueFromEventArgsStr</span> <span class="kd">extends</span> <span class="n">GenericUDF</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Global variables that inspect the input.</span>
</span><span class='line'>    <span class="c1">// These are set up during the initialize() call, and are then used during the calls to evaluate()</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ListObjectInspector</span>   <span class="n">listOI</span><span class="o">;</span>                   <span class="c1">// ObjectInspector for the list (array&lt;&gt;)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">StructObjectInspector</span> <span class="n">structOI</span><span class="o">;</span>                 <span class="c1">// ObjectInspector for the struct&lt;&gt;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ObjectInspector</span>       <span class="n">kiOI</span><span class="o">,</span> <span class="n">ksOI</span><span class="o">,</span> <span class="n">viOI</span><span class="o">,</span> <span class="n">vsOI</span><span class="o">;</span>   <span class="c1">// ObjectInspector for the elements of the struct&lt;&gt;: key_int, key_str, value_int, value_str</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">StringObjectInspector</span> <span class="n">targetOI</span><span class="o">;</span>                 <span class="c1">// ObjectInspector for the second arg that we match with target field</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDisplayString</span> <span class="o">(</span> <span class="n">String</span> <span class="o">[]</span><span class="n">arg0</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;getValueFromEventArgsStr&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// this is like the evaluate method of the simple API. </span>
</span><span class='line'>    <span class="c1">// It takes the actual arguments and returns the result.</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ObjectInspector</span> <span class="nf">initialize</span> <span class="o">(</span> <span class="n">ObjectInspector</span><span class="o">[]</span> <span class="n">arguments</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">UDFArgumentException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">arguments</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;getValueFromEventArgsStr only takes 2 arguments: List&lt;Struct&lt;bigint,string,bigint,string&gt;&gt;, String&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 1. Check we received the right object types.</span>
</span><span class='line'>        <span class="n">ObjectInspector</span> <span class="n">a</span> <span class="o">=</span> <span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">ObjectInspector</span> <span class="n">b</span> <span class="o">=</span> <span class="n">arguments</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="o">!(</span> <span class="n">a</span> <span class="k">instanceof</span> <span class="n">ListObjectInspector</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;The first argument must be a Array&lt;Struct&gt;, &quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot; but &quot;</span> <span class="o">+</span> <span class="n">a</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="o">!(</span> <span class="n">b</span> <span class="k">instanceof</span> <span class="n">StringObjectInspector</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;The second argument must be a String, &quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot; but &quot;</span> <span class="o">+</span> <span class="n">b</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 2. Get the object inspector for the list(array) elements; this should be a StructObjectInspector</span>
</span><span class='line'>        <span class="c1">// Then check that the struct has the correct fields.</span>
</span><span class='line'>        <span class="c1">// Also, store the ObjectInspectors for use later in the evaluate() method</span>
</span><span class='line'>        <span class="n">listOI</span>   <span class="o">=</span> <span class="o">(</span><span class="n">ListObjectInspector</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="n">targetOI</span> <span class="o">=</span> <span class="o">(</span><span class="n">StringObjectInspector</span><span class="o">)</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'>        <span class="n">structOI</span> <span class="o">=</span> <span class="o">(</span><span class="n">StructObjectInspector</span><span class="o">)</span><span class="n">listOI</span><span class="o">.</span><span class="na">getListElementObjectInspector</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getAllStructFieldRefs</span><span class="o">().</span><span class="na">size</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">4</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Incorrect number of fields in the struct. &quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;The first argument of type Array&lt;Struct&gt; must contains 4 fields, &quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot; but &quot;</span> <span class="o">+</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getAllStructFieldRefs</span><span class="o">().</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; fields is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StructField</span> <span class="n">key_int</span>   <span class="o">=</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldRef</span><span class="o">(</span><span class="s">&quot;key_int&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">StructField</span> <span class="n">key_str</span>   <span class="o">=</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldRef</span><span class="o">(</span><span class="s">&quot;key_str&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">StructField</span> <span class="n">value_int</span> <span class="o">=</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldRef</span><span class="o">(</span><span class="s">&quot;value_int&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">StructField</span> <span class="n">value_str</span> <span class="o">=</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldRef</span><span class="o">(</span><span class="s">&quot;value_str&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">key_int</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;No \&quot;key_int\&quot; field in input structure &quot;</span> <span class="o">+</span> <span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getTypeName</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">key_str</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;No \&quot;key_str\&quot; field in input structure &quot;</span> <span class="o">+</span> <span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getTypeName</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">value_int</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;No \&quot;value_int\&quot; field in input structure &quot;</span> <span class="o">+</span> <span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getTypeName</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">value_str</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;No \&quot;value_str\&quot; field in input structure &quot;</span> <span class="o">+</span> <span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getTypeName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">kiOI</span> <span class="o">=</span> <span class="n">key_int</span><span class="o">.</span><span class="na">getFieldObjectInspector</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ksOI</span> <span class="o">=</span> <span class="n">key_str</span><span class="o">.</span><span class="na">getFieldObjectInspector</span><span class="o">();</span>
</span><span class='line'>        <span class="n">viOI</span> <span class="o">=</span> <span class="n">value_int</span><span class="o">.</span><span class="na">getFieldObjectInspector</span><span class="o">();</span>
</span><span class='line'>        <span class="n">vsOI</span> <span class="o">=</span> <span class="n">value_str</span><span class="o">.</span><span class="na">getFieldObjectInspector</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">kiOI</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">ObjectInspector</span><span class="o">.</span><span class="na">Category</span><span class="o">.</span><span class="na">PRIMITIVE</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input primitive? key_int field must be a bigint, but &quot;</span> <span class="o">+</span> <span class="n">kiOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">ksOI</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">ObjectInspector</span><span class="o">.</span><span class="na">Category</span><span class="o">.</span><span class="na">PRIMITIVE</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input primitive? key_str field must be a string, but &quot;</span> <span class="o">+</span> <span class="n">ksOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">viOI</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">ObjectInspector</span><span class="o">.</span><span class="na">Category</span><span class="o">.</span><span class="na">PRIMITIVE</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input primitive? value_int field must be a bigint, but &quot;</span> <span class="o">+</span> <span class="n">viOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">vsOI</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">ObjectInspector</span><span class="o">.</span><span class="na">Category</span><span class="o">.</span><span class="na">PRIMITIVE</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input primitive? value_str field must be a string, but &quot;</span> <span class="o">+</span> <span class="n">vsOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="o">((</span><span class="n">PrimitiveObjectInspector</span><span class="o">)</span><span class="n">kiOI</span><span class="o">).</span><span class="na">getPrimitiveCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">PrimitiveObjectInspector</span><span class="o">.</span><span class="na">PrimitiveCategory</span><span class="o">.</span><span class="na">LONG</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input correct primitive? key_int field must be a bigint, but &quot;</span> <span class="o">+</span> <span class="n">kiOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="o">((</span><span class="n">PrimitiveObjectInspector</span><span class="o">)</span><span class="n">ksOI</span><span class="o">).</span><span class="na">getPrimitiveCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">PrimitiveObjectInspector</span><span class="o">.</span><span class="na">PrimitiveCategory</span><span class="o">.</span><span class="na">STRING</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input correct primitive? key_str field must be a string, but &quot;</span> <span class="o">+</span> <span class="n">ksOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="o">((</span><span class="n">PrimitiveObjectInspector</span><span class="o">)</span><span class="n">viOI</span><span class="o">).</span><span class="na">getPrimitiveCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">PrimitiveObjectInspector</span><span class="o">.</span><span class="na">PrimitiveCategory</span><span class="o">.</span><span class="na">LONG</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input correct primitive? value_int field must be a bigint, but &quot;</span> <span class="o">+</span> <span class="n">viOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="o">((</span><span class="n">PrimitiveObjectInspector</span><span class="o">)</span><span class="n">vsOI</span><span class="o">).</span><span class="na">getPrimitiveCategory</span><span class="o">()</span> <span class="o">!=</span> <span class="n">PrimitiveObjectInspector</span><span class="o">.</span><span class="na">PrimitiveCategory</span><span class="o">.</span><span class="na">STRING</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UDFArgumentTypeException</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Is input correct primitive? value_str field must be a bigint, but &quot;</span> <span class="o">+</span> <span class="n">vsOI</span><span class="o">.</span><span class="na">getTypeName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is found&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 3. the return type of our function is a bigint, so we provide the correct object inspector</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PrimitiveObjectInspectorFactory</span><span class="o">.</span><span class="na">javaLongObjectInspector</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The evaluate() method. The input is passed in as an array of DeferredObjects, so that</span>
</span><span class='line'>    <span class="c1">// computation is not wasted on deserializing them if they&#39;re not actually used</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">evaluate</span><span class="o">(</span> <span class="n">DeferredObject</span><span class="o">[]</span> <span class="n">arguments</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">HiveException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Should take 2 arguments</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">arguments</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">get</span><span class="o">()</span> <span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Iterate over the elements of the input array</span>
</span><span class='line'>        <span class="c1">// If a key_str of arguments[1] if found, return key_int</span>
</span><span class='line'>        <span class="c1">// Else return null</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">nelements</span> <span class="o">=</span> <span class="n">listOI</span><span class="o">.</span><span class="na">getListLength</span><span class="o">(</span><span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">get</span><span class="o">()),</span> <span class="n">val_int</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nelements</span><span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Text</span> <span class="n">tt</span> <span class="o">=</span> <span class="o">(</span><span class="n">Text</span><span class="o">)(</span><span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldData</span><span class="o">(</span> <span class="n">listOI</span><span class="o">.</span><span class="na">getListElement</span><span class="o">(</span><span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">get</span><span class="o">(),</span> <span class="n">i</span><span class="o">),</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldRef</span><span class="o">(</span><span class="s">&quot;key_str&quot;</span><span class="o">)</span> <span class="o">));</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">t</span> <span class="o">=</span> <span class="n">tt</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">// String skey_str = targetOI.getPrimitiveJavaObject(LSkey_str);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">target</span> <span class="o">=</span> <span class="n">targetOI</span><span class="o">.</span><span class="na">getPrimitiveJavaObject</span><span class="o">(</span><span class="n">arguments</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span> <span class="n">t</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">target</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Long</span> <span class="n">ll</span> <span class="o">=</span> <span class="o">((</span><span class="n">LongWritable</span><span class="o">)(</span><span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldData</span><span class="o">(</span> <span class="n">listOI</span><span class="o">.</span><span class="na">getListElement</span><span class="o">(</span><span class="n">arguments</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">get</span><span class="o">(),</span> <span class="n">i</span><span class="o">),</span> <span class="n">structOI</span><span class="o">.</span><span class="na">getStructFieldRef</span><span class="o">(</span><span class="s">&quot;value_int&quot;</span><span class="o">)</span> <span class="o">))).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">ll</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>小结</h2>

<p>本文粗浅地介绍了一个处理 <code>hive</code> <code>array&lt;struct&lt;&gt;&gt;</code> 数据类型的 <code>GenericUDF</code> 应该如何编写，大概就是这些了，第一次接触，略作记录，仅供参考。</p>

<hr />

<h2>参考</h2>

<ol>
<li><a href="http://hive.apache.org/javadocs/r0.10.0/api/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.html">官方GenericUDF API</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins">HivePlugins</a></li>
<li><a href="https://www.inkling.com/read/hadoop-definitive-guide-tom-white-3rd/chapter-12/ch12-section-08">User-Defined Functions</a></li>
<li><a href="http://www.congiu.com/structured-data-in-hive-a-generic-udf-to-sort-arrays-of-structs/">Structured data in Hive: a generic UDF to sort arrays of structs</a></li>
<li><a href="http://blog.matthewrathbone.com/2013/08/10/guide-to-writing-hive-udfs.html">Hadoop Hive UDF Tutorial - Extending Hive with Custom Functions</a></li>
<li><a href="http://www.baynote.com/2012/11/a-word-from-the-engineers/">Writing a Hive Generic UDF</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://RonnieTsang.github.io/blog/2014/09/05/hello-octopress/"/>
    <updated>2014-09-05T01:35:36+08:00</updated>
    <id>http://RonnieTsang.github.io/blog/2014/09/05/hello-octopress</id>
    <content type="html"><![CDATA[<p>想要有自己的博客这个想法很久很久了&hellip;行动上却很诚实，鄙视一下自己！</p>

<hr />

<p><code>2013-10-31</code> 号申请的域名 <a href="http://lseek.me">lseek.me</a> 一直闲置到现在，着实是暴殄天物！想当初好不容易才找到这个为数甚少的未被注册的 C 标准库函数名 <code>lseek</code>， 而且 <code>lseek.me</code> 刚好带有点 <code>寻求自我</code> 的意味，那时还真有点小激动呢～～～导致手一抖 280 块大洋没了 >_&lt;</p>

<p>前段时间无意知道 <code>github</code> + <code>octopress</code> 搭建 blog 这玩意，而且还是免费的，<code>github</code> 为你管理服务器，并提供无限流量，世界各地都有理想的访问速度，这还得了，叼炸天啊，不过过瘾怎么行！</p>

<p>于是一通搜索，看了诸多教程，基本上都是大同小异，照虎画猫很快把 blog 搭建了起来。本文简单记录一下整个过程：</p>

<!-- more -->


<hr />

<h2><strong>准备工作</strong></h2>

<blockquote><ul>
<li>安装 <a href="http://git-scm.com/">Git</a></li>
<li>安装 Ruby 1.9.3 或 更高版本 ( 通过 <a href="http://octopress.org/docs/setup/rbenv">rbenv</a> 或 <a href="http://octopress.org/docs/setup/rvm">RVM</a> )</li>
</ul>
</blockquote>

<h2><strong>搭建 Octopress 环境</strong></h2>

<h3>1) 安装 Octopress</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>


<h3>2) 安装相关依赖</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<h3>3) 安装默认的 Octopress 主题</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake install
</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://octopress.org/docs/setup/">Initial Setup</a></p>

<h2><strong>配置 Octopress</strong></h2>

<p>Octopress 的作者已经尽量让配置简化了。大多数情况下只需要配置 <code>_config.yml</code> 和 <code>Rakefile</code> 文件即可。其中 <code>Rakefile</code> 是跟博客部署相关，一般情况下并不需要修改这个文件，除非使用了 <code>rsync</code>。</p>

<p>这一块我就修改了一下 <code>_config.yml</code> 文件，把 <code>url</code> 和 <code>author</code> 加进去而已。其中 <code>url</code> 是必填项，内容是我在 github 上创建的一个仓库地址 <code>http://ronnietsang.github.io</code></p>

<p>接着删除了里面的 twitter 相关的信息，否则据说是由于 GFW 的原因，将会造成页面加载很慢。</p>

<p>然后修改定制文件 <code>./.themes/classic/source/_includes/custom/head.html</code> 把 google 的自定义字体去掉，原因同上。</p>

<p>参考：<a href="http://octopress.org/docs/configuring/">Basic Configuration</a></p>

<h2><strong>创建第一篇博客</strong></h2>

<p>没错，现在就已经可以开始写博客了！</p>

<h3>1) 创建博文</h3>

<p>Octopress 为我们提供了一些 task 来创建博文和页面。博文必须存储在 <code>source/_posts</code> 目录下，并且需要按照 Jekyll 的命名规范对文章进行命名：<code>YYYY-MM-DD-post-title.markdown</code>。文章的名字会被当做 <code>url</code> 的一部分，而其中的日期用于对博文的区分和排序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;Hello Octopress&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>Hello Octopress</code> 为博文的文件名，创建出来的文件默认是 <code>markdown</code> 格式。上面的命令会创建出这样一个文件：<code>./source/_posts/2014-09-04-hello-octopress.markdown</code>。打开这个文件，可以看到里面有如下一些内容了 ( 告诉Jekyll博客引擎如何处理博文和页面 )：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: <span class="s2">&quot;Hello Octopress&quot;</span>
</span><span class='line'>date: 2014-09-04 19:13:48 +0800
</span><span class='line'>comments: <span class="nb">true</span>
</span><span class='line'>categories:
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<h3>2) 编辑博文</h3>

<p>接下来使用你喜欢的 markdown 编辑器编写博文，完成后贴到上面的文件中就可以了。</p>

<blockquote><p>我用的是 <code>作业部落</code> 出品的 <a href="https://zybuluo.com/mdeditor">Cmd Markdown</a> 在线编辑阅读器，基本上兼容 github 的 markdown 文法，挺好用的，推荐！</p></blockquote>

<h3>3) 本地预览</h3>

<p>执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>然后就能在浏览器中进行本地预览访问了： <code>http://127.0.0.1:4000/</code> 或 <code>http://localhost:4000/</code>，效果跟仓库中的一样。</p>

<h3>4) 完整过程</h3>

<p>下面是创建并部署博文的一个完整过程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;Hello Octopress&quot;</span><span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;My first blog -- Hello Octopress&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>先 mark ，现在还无法部署博文，要等后面部署博客完毕再参考这个过程来部署博文。</p>

<p>参考：<a href="http://octopress.org/docs/blogging">Blogging Basics</a></p>

<hr />

<h2><strong>部署到 Github Pages</strong></h2>

<p>官方推荐了3种部署方式：</p>

<blockquote><ul>
<li><code>GitHub Pages</code>： 部署允许自定义域名，免费，好处是多人开发更方面，坏处是文件随时可以被任何人拉下来</li>
<li><code>Heroku</code>：部署允许自定义域名，免费，并且是私有的</li>
<li><code>Rsync</code>：建议用来部署有自己服务器的个人博客</li>
</ul>
</blockquote>

<p>当然了，我选择的是 <strong><a href="https://pages.github.com/">GitHub Pages</a></strong> 。</p>

<h3>1) 创建仓库</h3>

<p>在 <a href="https://github.com/">GitHub</a> 上创建仓库 <a href="https://github.com/RonnieTsang/ronnietsang.github.io">ronnietsang.github.io</a> ( 网上很多年代久远的教程都是说 com 后缀，现在改成 io 了 )</p>

<blockquote><ul>
<li>保持新建仓库为空的，不要勾选创建 <code>README</code> 文件等选项( 这可能导致后面部署 <code>rake deploy</code> 失败，引出一系列问题 )</li>
<li>一般来说，我们希望在将博客的源码放到 <code>source</code> 分支下，并把生成的内容提交到 <code>master</code> 分支</li>
</ul>
</blockquote>

<h3>2) 配置仓库</h3>

<p>一键配置：只需要利用 octopress 的一个配置 <code>rake</code> 任务就可以自动配置上面创建的仓库，超级方便：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>这个命令会要求你输入刚刚创建的仓库的 <code>url</code> ( <code>ssh</code> or <code>https</code> url )，拷贝过来，回车，接下来它就干了这么几件事：</p>

<blockquote><ul>
<li>将指向远程分支 imathis/octopress 的指针 origin 改名为 octopress</li>
<li>添加刚才创建的仓库为默认的远程分支</li>
<li>将活跃分支从 master 转到 source</li>
<li>根据 github仓库 配置博客的 url</li>
<li>创建一个_deploy目录，用来存放部署到 master 分支的内容</li>
</ul>
</blockquote>

<h3>3) 部署仓库</h3>

<p>命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>干了这么几件事：</p>

<blockquote><ul>
<li>生成博客文件，并拷贝至 _deploy 目录下</li>
<li>将这些内容添加到 git 中，并 commit 和 push 到仓库的 master 分支</li>
</ul>
</blockquote>

<p>不过博客的 <code>source</code> 需要单独提交，执行如下命令就可以将 <code>source</code> 提交到仓库的 <code>source</code> 分支下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;Initial source commit&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，博客已经完成基本的部署。但是当我满心期待地使用前面配置的 url 来访问时，直接来了一个冷冰冰的 <code>404</code>！好吧，莫慌，原来是有延迟，稍等几分钟(我等了半个钟&hellip;)，终于可以正常访问了！</p>

<p>参考：<a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></p>

<hr />

<h2><strong>更多功能</strong></h2>

<p>在搭建博客的时候，我们可能会对博客做一些配置，例如添加评论、域名解析、分享等。先 mark，以后再慢慢了解吧。</p>

<p>参考：</p>

<blockquote><ul>
<li><a href="http://octopress.org/docs/blogging/code">Sharing Code Snippets</a></li>
<li><a href="http://octopress.org/docs/blogging/plugins">Blogging With Plugins</a></li>
<li><a href="http://octopress.org/docs/theme">Theming &amp; Customization</a></li>
<li><a href="http://octopress.org/docs/updating">Updating Octopress</a></li>
</ul>
</blockquote>

<hr />

<p><strong>承诺</strong></p>

<p>下个死命令：坚持下去，中秋回来以后，每周至少更新 <code>2</code> 篇技术博文！</p>
]]></content>
  </entry>
  
</feed>
